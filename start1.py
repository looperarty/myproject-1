import logging
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters, CallbackQueryHandler

from facebook_business.api import FacebookAdsApi
from facebook_business.adobjects.adaccount import AdAccount
from facebook_business.adobjects.campaign import Campaign 
from facebook_business.adobjects.adset import AdSet 
from facebook_business.exceptions import FacebookRequestError

import io # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—É—Ñ–µ—Ä–æ–º –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
import matplotlib.pyplot as plt # –î–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è matplotlib (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –≤–∏–¥)
plt.style.use('seaborn-v0_8-darkgrid') 

# --- –ö–õ–Æ–ß–ò –ò –ù–ê–°–¢–†–û–ô–ö–ò ---
# !!! –í–ù–ò–ú–ê–¢–ï–õ–¨–ù–û –ó–ê–ü–û–õ–ù–ò –í–°–ï 5 –ó–ù–ê–ß–ï–ù–ò–ô –°–í–û–ò–ú–ò –î–ê–ù–ù–´–ú–ò !!!
# –ü–æ–ª—É—á–∏ —Å–≤–æ–π Telegram Token —É BotFather
TELEGRAM_TOKEN = '7879718352:AAFdjjlblqNROm4mq8GLB9pnRdUPIaq8lHw' 
# –¢–≤–æ–π Telegram ID (—á–∏—Å–ª–æ–º, –±–µ–∑ –∫–∞–≤—ã—á–µ–∫). –£–∑–Ω–∞—Ç—å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ @userinfobot (–Ω–∞–ø–∏—à–∏ –µ–º—É /start –∏ –æ–Ω –ø–æ–∫–∞–∂–µ—Ç —Ç–≤–æ–π ID)
ADMIN_TELEGRAM_ID = 5625120142  # –ù–∞–ø—Ä–∏–º–µ—Ä: 1234567890

# –ü–æ–ª—É—á–∏ Facebook Access Token, App ID, App Secret –∏–∑ —Å–≤–æ–µ–≥–æ Meta For Developers –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
# –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç–æ–∫–µ–Ω –∏–º–µ–µ—Ç –Ω—É–∂–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è (scopes), –Ω–∞–ø—Ä–∏–º–µ—Ä: 
# ads_read, ads_management, pages_read_engagement, pages_messaging, leads_retrieval, read_insights.
FB_ACCESS_TOKEN = 'EAAJ8ZBYdYhHIBOZCtL2GHEqqqfwaGKcu0nTsV8Ch0lYzZBdhlqZB80ggz3kbgYHJDW0tpik45sfnzfjaSACeOFitccutYsnjIc1fPQTa7Q1nTyaZAcBLzXnp2BrEmrnPkNUkRo7SYoEQWQuczLU1pqKVRgYCEAWeJcTy05CsBWjM2DBUJ5ZBl21JFOUcT4r9VpN2xJyN2vssZARo6YjNKoPHxIDNZCTlF9ZB2ZAsud5mt9HKdD0N8348oZD' 
FB_APP_ID = '700361112847474'
FB_APP_SECRET = 'c947026dfd934f50d832a65eae000ba1'
# –¢–≤–æ–π ID —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –§–æ—Ä–º–∞—Ç: 'act_1234567890'. –ù–∞–π—Ç–∏ –º–æ–∂–Ω–æ –≤ URL Ads Manager –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.
AD_ACCOUNT_ID = 'act_1573639266674008' # –¢–≤–æ–π —Ä–µ–∫–ª–∞–º–Ω—ã–π ID —É–∂–µ –≤—Å—Ç–∞–≤–ª–µ–Ω
# -----------------------------------------

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏: –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    user_id = update.effective_user.id
    if user_id != ADMIN_TELEGRAM_ID:
        await context.bot.send_message(chat_id=user_id, text="–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
        return

    # –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [[KeyboardButton("üìä –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç")], [KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await context.bot.send_message(
        chat_id=update.effective_chat.id, 
        text="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
        reply_markup=reply_markup
    )
    logging.info(f"–ê–¥–º–∏–Ω {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –∏–ª–∏ –ø–æ–º–æ—â–∏.
    """
    user_id = update.effective_user.id
    if user_id != ADMIN_TELEGRAM_ID: 
        await context.bot.send_message(chat_id=user_id, text="–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    text = update.message.text
    
    if text == "üìä –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç":
        await ask_for_period(update, context) # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        await context.bot.send_message(
            chat_id=update.effective_chat.id, 
            text="–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ –≤–∞—à–∏—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π –≤ Facebook (Meta)."
        )
    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id, 
            text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é."
        )

async def ask_for_period(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ."""
    # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (callback_data –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 'period_')
    keyboard = [
        [InlineKeyboardButton("–ó–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data='period_today')],
        [InlineKeyboardButton("–ó–∞ –≤—á–µ—Ä–∞", callback_data='period_yesterday')],
        [InlineKeyboardButton("–ó–∞ 7 –¥–Ω–µ–π", callback_data='period_last_7d')],
        [InlineKeyboardButton("–ó–∞ 30 –¥–Ω–µ–π", callback_data='period_last_30d')],
        [InlineKeyboardButton("–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", callback_data='period_this_month')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?', reply_markup=reply_markup)
    logging.info(f"–ê–¥–º–∏–Ω {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞.")

    context.user_data['last_message_id'] = update.message.message_id
    context.user_data['chat_id'] = update.effective_chat.id


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –∏ —É—Ä–æ–≤–Ω—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏.
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Facebook Ads API –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç.
    """
    query = update.callback_query
    await query.answer() # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ "–æ—Ç–≤–µ—á–∞–µ–º" –Ω–∞ callback query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —É –∫–Ω–æ–ø–∫–∏

    data = query.data # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ callback_data (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'period_today' –∏–ª–∏ 'level_campaigns')
    user_id = query.from_user.id
    chat_id = query.message.chat_id

    # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback_data:
    # 1. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø–µ—Ä–∏–æ–¥
    if data.startswith('period_'):
        period_type = data.replace('period_', '') # –ü–æ–ª—É—á–∞–µ–º 'today', 'yesterday' –∏ —Ç.–¥.
        context.user_data['selected_period'] = period_type # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤ user_data

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
        keyboard = [
            [InlineKeyboardButton("–ü–æ –∫–∞–º–ø–∞–Ω–∏—è–º (–ø–æ–¥—Ä–æ–±–Ω–æ)", callback_data='level_campaigns')],
            [InlineKeyboardButton("–ü–æ –≥—Ä—É–ø–ø–∞–º –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–ø–æ–¥—Ä–æ–±–Ω–æ)", callback_data='level_adsets')], 
            [InlineKeyboardButton("–ü–æ –≥—Ä—É–ø–ø–∞–º (–∫—Ä–∞—Ç–∫–æ –ø–µ—Ä–µ–ø–∏—Å–∫–∏)", callback_data='level_brief_adsets_messages')], 
            [InlineKeyboardButton("üìä –°—Ä–∞–≤–Ω–∏—Ç—å –í—á–µ—Ä–∞ vs –°–µ–≥–æ–¥–Ω—è", callback_data='level_compare_daily')], 
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
        await query.edit_message_text(
            text=f"–ü–µ—Ä–∏–æ–¥: {period_type.replace('_', ' ').title()}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –æ—Ç—á–µ—Ç–∞:", 
            reply_markup=reply_markup
        )
        logging.info(f"–ê–¥–º–∏–Ω {user_id} –≤—ã–±—Ä–∞–ª –ø–µ—Ä–∏–æ–¥: {period_type}. –ó–∞–ø—Ä–æ—Å —É—Ä–æ–≤–Ω—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏.")

    # 2. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —É—Ä–æ–≤–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    elif data.startswith('level_'):
        level_type = data.replace('level_', '') 
        selected_period = context.user_data.get('selected_period')

        # –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ (–í—á–µ—Ä–∞ vs –°–µ–≥–æ–¥–Ω—è) –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π 'selected_period' –Ω–µ –Ω—É–∂–µ–Ω, –æ–Ω —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω
        if level_type != 'compare_daily' and not selected_period:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –ü–µ—Ä–∏–æ–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–∞–≤ 'üìä –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç'.")
            logging.error(f"–ê–¥–º–∏–Ω {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–≤—ã–º –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∞—Å—Ç–µ–π –æ—Ç—á–µ—Ç–∞
        await context.bot.send_message(chat_id=chat_id, text=f"–ú–∏–Ω—É—Ç–∫—É, –∑–∞–ø—Ä–∞—à–∏–≤–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ '{level_type.replace('_', ' ').title()}' —É Facebook...")
        logging.info(f"–ê–¥–º–∏–Ω {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ—Ç—á–µ—Ç –ø–æ {level_type} –∑–∞ {selected_period if level_type != 'compare_daily' else '—Å–µ–≥–æ–¥–Ω—è/–≤—á–µ—Ä–∞'}.")

        try:
            FacebookAdsApi.init(app_id=FB_APP_ID, app_secret=FB_APP_SECRET, access_token=FB_ACCESS_TOKEN)
            account = AdAccount(AD_ACCOUNT_ID)
            
            response_parts = [] 

            if level_type == 'campaigns':
                response_parts = await get_campaign_report(account, selected_period)
            elif level_type == 'adsets': 
                response_parts = await get_adset_report(account, selected_period)
            elif level_type == 'brief_adsets_messages': 
                response_parts = await get_brief_adset_report(account, selected_period)
            elif level_type == 'compare_daily': 
                # –î–ª—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ period –±–µ—Ä–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏, –ø–µ—Ä–µ–¥–∞–µ–º bot –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ
                response_parts = await get_daily_comparison_report(account, chat_id, context.bot) 
                
            else:
                response_parts = ["–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –æ—Ç—á–µ—Ç–∞."]
                logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –æ—Ç—á–µ—Ç–∞: {level_type} –¥–ª—è –∞–¥–º–∏–Ω–∞ {user_id}.")

            if response_parts:
                for part in response_parts:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —á–∞—Å—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
                    if isinstance(part, str):
                        await context.bot.send_message(chat_id=chat_id, text=part, parse_mode='Markdown')
                    # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ get_daily_comparison_report, 
                    # –ø–æ—ç—Ç–æ–º—É –∑–¥–µ—Å—å –º—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö
                logging.info(f"–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É {user_id} –∑–∞ –ø–µ—Ä–∏–æ–¥ {selected_period if level_type != 'compare_daily' else '—Å–µ–≥–æ–¥–Ω—è/–≤—á–µ—Ä–∞'}.")
            else:
                await context.bot.send_message(chat_id=chat_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.", parse_mode='Markdown')


        except FacebookRequestError as e:
            error_message = f"–û—à–∏–±–∫–∞ Facebook API: –ö–æ–¥: {e.api_error_code()} - –°–æ–æ–±—â–µ–Ω–∏–µ: {e.api_error_message()}"
            logging.error(f"–û—à–∏–±–∫–∞ Facebook API –¥–ª—è –∞–¥–º–∏–Ω–∞ {user_id}: {error_message}", exc_info=True)
            await context.bot.send_message(chat_id=chat_id, text=error_message) 
        except Exception as e:
            full_error = f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"
            logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ {user_id}: {full_error}", exc_info=True)
            await context.bot.send_message(chat_id=chat_id, text=f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: {e}") 

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏ (—á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç Telegram)
def split_message(text: str, max_length: int = 4000) -> list[str]:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ max_length."""
    parts = []
    current_part = ""
    lines = text.split('\n')
    
    for line in lines:
        if len(current_part) + len(line) + 1 > max_length: 
            parts.append(current_part.strip())
            current_part = ""
        current_part += line + '\n'
    
    if current_part: 
        parts.append(current_part.strip())
        
    return parts

async def get_campaign_report(account: AdAccount, period: str) -> list[str]:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ (—á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è)."""
    active_campaigns = account.get_campaigns(
        fields=[Campaign.Field.name, Campaign.Field.id], 
        params={'effective_status': ['ACTIVE']} 
    )

    if not active_campaigns:
        return [f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥ '{period.replace('_', ' ').title()}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."]

    all_campaign_details = [] 
    
    for campaign in active_campaigns:
        campaign_id = campaign['id']
        campaign_name = campaign['name']

        insights_params = {
            'date_preset': period,
            'fields': 'spend,clicks,cpc,ctr,impressions,reach,conversions,frequency,actions,cost_per_action_type'
        }
        campaign_insights = list(campaign.get_insights(params=insights_params))
        insights = campaign_insights[0] if campaign_insights else {} 

        spend = insights.get('spend', '0')
        clicks = insights.get('clicks', '0')
        cpc = insights.get('cpc', '0')
        ctr = insights.get('ctr', '0')
        impressions = insights.get('impressions', '0')
        reach = insights.get('reach', '0')
        conversions = insights.get('conversions', '0') 
        frequency = insights.get('frequency', '0')

        messenger_sends = '0' 
        leads_generated = '0' 
        cost_per_messenger_send = '0'
        cost_per_lead = '0'

        actions_list = insights.get('actions', []) 
        for action in actions_list:
            action_type = action.get('action_type')
            value = str(action.get('value', '0')) 

            if action_type == 'onsite_conversion.total_messaging_connection':
                messenger_sends = value
            elif action_type == 'onsite_conversion.lead': 
                leads_generated = value
            
        cost_per_action_list = insights.get('cost_per_action_type', [])
        for cost_action in cost_per_action_list:
            action_type = cost_action.get('action_type')
            value = str(cost_action.get('value', '0')) 
            if action_type == 'onsite_conversion.total_messaging_connection':
                cost_per_messenger_send = value
            elif action_type == 'onsite_conversion.lead':
                cost_per_lead = value

        campaign_detail_text = (
            f"üåü –ö–∞–º–ø–∞–Ω–∏—è *{campaign_name}*:\n"
            f"  - üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: **${float(spend):.2f}**\n" 
            f"  - üñ± –ö–ª–∏–∫–∏: **{clicks}**\n"
            f"  - üí∞ –¶–µ–Ω–∞ –∑–∞ –∫–ª–∏–∫ (CPC): **${float(cpc):.2f}**\n"
            f"  - üéØ CTR: **${float(ctr):.2f}%**\n"
            f"  - üëÄ –ü–æ–∫–∞–∑—ã: **{impressions}**\n"
            f"  - üë§ –û—Ö–≤–∞—Ç: **{reach}**\n"
            f"  - ‚ú® –ö–æ–Ω–≤–µ—Ä—Å–∏–∏ (–æ–±—â–∏–µ): **{conversions}**\n"
            f"  - üí¨ –ù–∞—á–∞—Ç–æ –ø–µ—Ä–µ–ø–∏—Å–æ–∫: **{messenger_sends}**\n" 
            f"  - üí∞ –¶–µ–Ω–∞ –∑–∞ –ø–µ—Ä–µ–ø–∏—Å–∫—É: **${float(cost_per_messenger_send):.2f}**\n" 
            f"  - üìù –õ–∏–¥—ã (—Å —Ñ–æ—Ä–º): **{leads_generated}**\n" 
            f"  - üí∞ –¶–µ–Ω–∞ –∑–∞ –ª–∏–¥: **${float(cost_per_lead):.2f}**\n" 
            f"  - üîÅ –ß–∞—Å—Ç–æ—Ç–∞: **${float(frequency):.2f}**\n\n"
        )
        all_campaign_details.append(campaign_detail_text)
    
    header = f"üìä **–û—Ç—á–µ—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –∫–∞–º–ø–∞–Ω–∏—è–º ({period.replace('_', ' ').title()}):**\n\n"
    full_report_text = header + "".join(all_campaign_details)
    return split_message(full_report_text)


async def get_adset_report(account: AdAccount, period: str) -> list[str]:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≥—Ä—É–ø–ø–∞–º –æ–±—ä—è–≤–ª–µ–Ω–∏–π (Adsets) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫."""
    
    active_campaigns = account.get_campaigns(
        fields=[Campaign.Field.name, Campaign.Field.id],
        params={'effective_status': ['ACTIVE']}
    )

    if not active_campaigns:
        return ["–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø –æ–±—ä—è–≤–ª–µ–Ω–∏–π."]

    all_adset_details = [] 
    
    found_adsets_in_period = False 
    for campaign in active_campaigns:
        campaign_name = campaign['name']
        
        adsets = campaign.get_ad_sets( 
            fields=[AdSet.Field.name, AdSet.Field.id],
            params={'effective_status': ['ACTIVE']}
        )
        
        for adset in adsets:
            adset_name = adset['name']
            
            insights_params = {
                'date_preset': period,
                'fields': 'spend,clicks,cpc,ctr,impressions,reach,conversions,frequency,actions,cost_per_action_type'
            }
            adset_insights = list(adset.get_insights(params=insights_params))
            insights = adset_insights[0] if adset_insights else {}

            if float(insights.get('spend', '0')) > 0 or float(insights.get('clicks', '0')) > 0:
                found_adsets_in_period = True
                
                spend = insights.get('spend', '0')
                clicks = insights.get('clicks', '0')
                cpc = insights.get('cpc', '0')
                ctr = insights.get('ctr', '0')
                impressions = insights.get('impressions', '0')
                reach = insights.get('reach', '0')
                conversions = insights.get('conversions', '0') 
                frequency = insights.get('frequency', '0')

                messenger_sends = '0' 
                leads_generated = '0' 
                cost_per_messenger_send = '0'
                cost_per_lead = '0'

                actions_list = insights.get('actions', []) 
                for action in actions_list:
                    action_type = action.get('action_type')
                    value = str(action.get('value', '0'))
                    if action_type == 'onsite_conversion.total_messaging_connection':
                        messenger_sends = value
                    elif action_type == 'onsite_conversion.lead': 
                        leads_generated = value

                cost_per_action_list = insights.get('cost_per_action_type', [])
                for cost_action in cost_per_action_list:
                    action_type = cost_action.get('action_type')
                    value = str(cost_action.get('value', '0'))
                    if action_type == 'onsite_conversion.total_messaging_connection':
                        cost_per_messenger_send = value
                    elif action_type == 'onsite_conversion.lead':
                        cost_per_lead = value

                adset_detail_text = (
                    f"üî• –ì—Ä—É–ø–ø–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π *{adset_name}* (–ö–∞–º–ø–∞–Ω–∏—è: {campaign_name}):\n"
                    f"  - üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: **${float(spend):.2f}**\n" 
                    f"  - üñ± –ö–ª–∏–∫–∏: **{clicks}**\n"
                    f"  - üí∞ –¶–µ–Ω–∞ –∑–∞ –∫–ª–∏–∫ (CPC): **${float(cpc):.2f}**\n"
                    f"  - üéØ CTR: **${float(ctr):.2f}%**\n"
                    f"  - üëÄ –ü–æ–∫–∞–∑—ã: **{impressions}**\n"
                    f"  - üë§ –û—Ö–≤–∞—Ç: **{reach}**\n"
                    f"  - ‚ú® –ö–æ–Ω–≤–µ—Ä—Å–∏–∏ (–æ–±—â–∏–µ): **{conversions}**\n"
                    f"  - üí¨ –ù–∞—á–∞—Ç–æ –ø–µ—Ä–µ–ø–∏—Å–æ–∫: **{messenger_sends}**\n" 
                    f"  - üí∞ –¶–µ–Ω–∞ –∑–∞ –ø–µ—Ä–µ–ø–∏—Å–∫—É: **${float(cost_per_messenger_send):.2f}**\n" 
                    f"  - üìù –õ–∏–¥—ã (—Å —Ñ–æ—Ä–º): **{leads_generated}**\n" 
                    f"  - üí∞ –¶–µ–Ω–∞ –∑–∞ –ª–∏–¥: **${float(cost_per_lead):.2f}**\n" 
                    f"  - üîÅ –ß–∞—Å—Ç–æ—Ç–∞: **${float(frequency):.2f}**\n\n"
                )
                all_adset_details.append(adset_detail_text)
    
    if not found_adsets_in_period:
        return [f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ '{period.replace('_', ' ').title()}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."]

    header = f"üìä **–û—Ç—á–µ—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –≥—Ä—É–ø–ø–∞–º –æ–±—ä—è–≤–ª–µ–Ω–∏–π ({period.replace('_', ' ').title()}):**\n\n"
    full_report_text = header + "".join(all_adset_details)
    return split_message(full_report_text)


async def get_brief_adset_report(account: AdAccount, period: str) -> list[str]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ –≥—Ä—É–ø–ø–∞–º –æ–±—ä—è–≤–ª–µ–Ω–∏–π (Adsets) —Å —Ñ–æ–∫—É—Å–æ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∞—Ö –∏ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ (—á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è).
    """
    active_campaigns = account.get_campaigns(
        fields=[Campaign.Field.name, Campaign.Field.id],
        params={'effective_status': ['ACTIVE']}
    )

    if not active_campaigns:
        return ["–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–¥–ª—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞)."]

    all_brief_adset_details = [] 
    
    found_adsets_with_messages = False 
    for campaign in active_campaigns:
        campaign_name = campaign['name']
        
        adsets = campaign.get_ad_sets( 
            fields=[AdSet.Field.name, AdSet.Field.id],
            params={'effective_status': ['ACTIVE']}
        )
        
        for adset in adsets:
            adset_name = adset['name']
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ actions –∏ cost_per_action_type –¥–ª—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            insights_params = {
                'date_preset': period,
                'fields': 'actions,cost_per_action_type' 
            }
            adset_insights = list(adset.get_insights(params=insights_params))
            insights = adset_insights[0] if adset_insights else {}

            messenger_sends = '0' 
            cost_per_messenger_send = '0'
            
            actions_list = insights.get('actions', []) 
            for action in actions_list:
                action_type = action.get('action_type')
                value = str(action.get('value', '0'))
                if action_type == 'onsite_conversion.total_messaging_connection':
                    messenger_sends = value
                # –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ action_type –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å–æ–∫, –¥–æ–±–∞–≤—å –∏—Ö —Å—é–¥–∞ –∏ —Å—É–º–º–∏—Ä—É–π

            cost_per_action_list = insights.get('cost_per_action_type', [])
            for cost_action in cost_per_action_list:
                action_type = cost_action.get('action_type')
                value = str(cost_action.get('value', '0'))
                if action_type == 'onsite_conversion.total_messaging_connection':
                    cost_per_messenger_send = value
                # –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ action_type –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å–æ–∫, –¥–æ–±–∞–≤—å –∏—Ö —Å—é–¥–∞ –∏ —É—Å—Ä–µ–¥–Ω—è–π –∏–ª–∏ –≤—ã–±–∏—Ä–∞–π –æ—Å–Ω–æ–≤–Ω—É—é

            # –î–æ–±–∞–≤–ª—è–µ–º adset –≤ –æ—Ç—á–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
            if float(messenger_sends) > 0: 
                found_adsets_with_messages = True
                
                brief_adset_detail_text = (
                    f"üí¨ –ì—Ä—É–ø–ø–∞ *{adset_name}* (–ö–∞–º–ø–∞–Ω–∏—è: {campaign_name}):\n"
                    f"  - –ù–∞—á–∞—Ç–æ –ø–µ—Ä–µ–ø–∏—Å–æ–∫: **{messenger_sends}**\n" 
                    f"  - –¶–µ–Ω–∞ –∑–∞ –ø–µ—Ä–µ–ø–∏—Å–∫—É: **${float(cost_per_messenger_send):.2f}**\n\n" 
                )
                all_brief_adset_details.append(brief_adset_detail_text)
    
    if not found_adsets_with_messages:
        return [f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –ø–µ—Ä–µ–ø–∏—Å–∫–∞–º–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ '{period.replace('_', ' ').title()}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."]

    header = f"üìä **–ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ –≥—Ä—É–ø–ø–∞–º –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–ü–µ—Ä–µ–ø–∏—Å–∫–∏, {period.replace('_', ' ').title()}):**\n\n"
    full_report_text = header + "".join(all_brief_adset_details)
    return split_message(full_report_text)


async def get_daily_comparison_report(account: AdAccount, chat_id: int, bot) -> list[str]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç-—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ "–í—á–µ—Ä–∞ vs –°–µ–≥–æ–¥–Ω—è" –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ (–ø–æ—Ç—Ä–∞—á–µ–Ω–æ, –ø–µ—Ä–µ–ø–∏—Å–∫–∏, —Ü–µ–Ω–∞).
    –¢–∞–∫–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∏–∞–≥—Ä–∞–º–º—É.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ (—á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è), –∏—Å–∫–ª—é—á–∞—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é.
    """
    report_lines = []
    
    # 1. –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –≤—á–µ—Ä–∞
    insights_today = {}
    insights_yesterday = {}

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è (—É—Ä–æ–≤–µ–Ω—å –∞–∫–∫–∞—É–Ω—Ç–∞, –Ω–µ –∫–∞–º–ø–∞–Ω–∏–π)
        today_insights_data = list(account.get_insights(
            params={'date_preset': 'today', 'fields': 'spend,actions,cost_per_action_type'}
        ))
        if today_insights_data:
            insights_today = today_insights_data[0]

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤—á–µ—Ä–∞ (—É—Ä–æ–≤–µ–Ω—å –∞–∫–∫–∞—É–Ω—Ç–∞)
        yesterday_insights_data = list(account.get_insights(
            params={'date_preset': 'yesterday', 'fields': 'spend,actions,cost_per_action_type'}
        ))
        if yesterday_insights_data:
            insights_yesterday = yesterday_insights_data[0]

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}", exc_info=True)
        return ["–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."]

    # 2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ (–¥–ª—è —Å–µ–≥–æ–¥–Ω—è –∏ –≤—á–µ—Ä–∞)
    # –°–µ–≥–æ–¥–Ω—è
    spend_today = float(insights_today.get('spend', '0'))
    messenger_sends_today = '0'
    cost_per_messenger_send_today = '0'

    for action in insights_today.get('actions', []):
        if action.get('action_type') == 'onsite_conversion.total_messaging_connection':
            messenger_sends_today = str(action.get('value', '0'))
            break 
    for cost_action in insights_today.get('cost_per_action_type', []):
        if cost_action.get('action_type') == 'onsite_conversion.total_messaging_connection':
            cost_per_messenger_send_today = str(cost_action.get('value', '0'))
            break
    
    # –í—á–µ—Ä–∞
    spend_yesterday = float(insights_yesterday.get('spend', '0'))
    messenger_sends_yesterday = '0'
    cost_per_messenger_send_yesterday = '0'

    for action in insights_yesterday.get('actions', []):
        if action.get('action_type') == 'onsite_conversion.total_messaging_connection':
            messenger_sends_yesterday = str(action.get('value', '0'))
            break
    for cost_action in insights_yesterday.get('cost_per_action_type', []):
        if cost_action.get('action_type') == 'onsite_conversion.total_messaging_connection':
            cost_per_messenger_send_yesterday = str(cost_action.get('value', '0'))
            break

    # 3. –†–∞—Å—á–µ—Ç —Ä–∞–∑–Ω–∏—Ü—ã –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç—á–µ—Ç–∞
    report_lines.append("üìä **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π: –°–µ–≥–æ–¥–Ω—è vs –í—á–µ—Ä–∞ (–ø–æ –∞–∫–∫–∞—É–Ω—Ç—É)**\n\n")

    # –ü–æ—Ç—Ä–∞—á–µ–Ω–æ
    spend_diff_percent = ((spend_today - spend_yesterday) / (spend_yesterday or 1e-9) * 100) if spend_today > 0 or spend_yesterday > 0 else 0
    report_lines.append(f"üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ:\n  - –°–µ–≥–æ–¥–Ω—è: **${spend_today:.2f}**\n  - –í—á–µ—Ä–∞: **${spend_yesterday:.2f}**\n  - –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {spend_diff_percent:.2f}% {'‚¨ÜÔ∏è' if spend_diff_percent > 0 else ('‚¨áÔ∏è' if spend_diff_percent < 0 else '‚ÜîÔ∏è')}\n\n")

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–ø–∏—Å–æ–∫
    sends_today_val = float(messenger_sends_today)
    sends_yesterday_val = float(messenger_sends_yesterday)
    sends_diff_percent = ((sends_today_val - sends_yesterday_val) / (sends_yesterday_val or 1e-9) * 100) if sends_today_val > 0 or sends_yesterday_val > 0 else 0
    report_lines.append(f"üí¨ –ù–∞—á–∞—Ç–æ –ø–µ—Ä–µ–ø–∏—Å–æ–∫:\n  - –°–µ–≥–æ–¥–Ω—è: **{int(sends_today_val)}**\n  - –í—á–µ—Ä–∞: **{int(sends_yesterday_val)}**\n  - –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {sends_diff_percent:.2f}% {'‚¨ÜÔ∏è' if sends_diff_percent > 0 else ('‚¨áÔ∏è' if sends_diff_percent < 0 else '‚ÜîÔ∏è')}\n\n")

    # –¶–µ–Ω–∞ –∑–∞ –ø–µ—Ä–µ–ø–∏—Å–∫—É (CPC –Ω–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∏)
    cpm_today_val = float(cost_per_messenger_send_today)
    cpm_yesterday_val = float(cost_per_messenger_send_yesterday)
    cpm_diff_percent = ((cpm_today_val - cpm_yesterday_val) / (cpm_yesterday_val or 1e-9) * 100) if cpm_today_val > 0 or cpm_yesterday_val > 0 else 0
    # –î–ª—è —Ü–µ–Ω—ã —Å—Ç—Ä–µ–ª–∫–∏ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã (–º–µ–Ω—å—à–∞—è —Ü–µ–Ω–∞ - –ª—É—á—à–µ)
    report_lines.append(f"üí∞ –¶–µ–Ω–∞ –∑–∞ –ø–µ—Ä–µ–ø–∏—Å–∫—É:\n  - –°–µ–≥–æ–¥–Ω—è: **${cpm_today_val:.2f}**\n  - –í—á–µ—Ä–∞: **${cpm_yesterday_val:.2f}**\n  - –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {cpm_diff_percent:.2f}% {'‚¨áÔ∏è' if cpm_diff_percent > 0 else ('‚¨ÜÔ∏è' if cpm_diff_percent < 0 else '‚ÜîÔ∏è')}\n\n") 

    # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã
    try:
        if spend_today + spend_yesterday > 0 or sends_today_val + sends_yesterday_val > 0:
            labels = ['–í—á–µ—Ä–∞', '–°–µ–≥–æ–¥–Ω—è']
            bar_width = 0.5 # –¢–æ–ª—â–∏–Ω–∞ –ø–æ–ª–æ—Å—ã

            # --- –ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–∞—Ç ---
            # –£–º–µ–Ω—å—à–∞–µ–º –≤—ã—Å–æ—Ç—É figure –¥–ª—è —Ç–æ–Ω–∫–∏—Ö –ø–æ–ª–æ—Å
            fig1, ax1 = plt.subplots(figsize=(6, 3)) 
            spends = [spend_yesterday, spend_today]
            
            # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞
            y_pos_spends = range(len(labels))
            ax1.barh(y_pos_spends, spends, height=bar_width, color=['lightcoral', 'skyblue'])
            ax1.set_yticks(y_pos_spends)
            ax1.set_yticklabels(labels)
            ax1.set_title('–¢—Ä–∞—Ç—ã')
            ax1.set_xlabel('–°—É–º–º–∞ ($)')
            ax1.invert_yaxis() # –°–≤–µ—Ä—Ö—É "–í—á–µ—Ä–∞", —Å–Ω–∏–∑—É "–°–µ–≥–æ–¥–Ω—è"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –ø–æ–ª–æ—Å—ã
            for i, v in enumerate(spends):
                ax1.text(v + (max(spends)*0.05 if max(spends) > 0 else 1), i, f'${v:.2f}', va='center', ha='left', fontsize=9)
            
            plt.tight_layout()
            
            buf1 = io.BytesIO()
            plt.savefig(buf1, format='png', bbox_inches='tight')
            buf1.seek(0)
            plt.close(fig1) 

            await bot.send_photo(chat_id=chat_id, photo=buf1, caption="–î–∏–Ω–∞–º–∏–∫–∞ —Ç—Ä–∞—Ç –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É:")
            
            # --- –ì—Ä–∞—Ñ–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–ø–∏—Å–æ–∫ ---
            fig2, ax2 = plt.subplots(figsize=(6, 3)) # –£–º–µ–Ω—å—à–∞–µ–º –≤—ã—Å–æ—Ç—É figure
            sends_counts = [sends_yesterday_val, sends_today_val]
            
            # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞
            y_pos_sends = range(len(labels))
            ax2.barh(y_pos_sends, sends_counts, height=bar_width, color=['lightcoral', 'skyblue'])
            ax2.set_yticks(y_pos_sends)
            ax2.set_yticklabels(labels)
            ax2.set_title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–ø–∏—Å–æ–∫')
            ax2.set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
            ax2.invert_yaxis() # –°–≤–µ—Ä—Ö—É "–í—á–µ—Ä–∞", —Å–Ω–∏–∑—É "–°–µ–≥–æ–¥–Ω—è"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –ø–æ–ª–æ—Å—ã
            for i, v in enumerate(sends_counts):
                ax2.text(v + (max(sends_counts)*0.05 if max(sends_counts) > 0 else 1), i, f'{int(v)}', va='center', ha='left', fontsize=9)
            
            plt.tight_layout()

            buf2 = io.BytesIO()
            plt.savefig(buf2, format='png', bbox_inches='tight')
            buf2.seek(0)
            plt.close(fig2)

            await bot.send_photo(chat_id=chat_id, photo=buf2, caption="–î–∏–Ω–∞–º–∏–∫–∞ –ø–µ—Ä–µ–ø–∏—Å–æ–∫ –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É:")

        else:
            report_lines.append("–ù–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞ –¥–Ω—è.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã: {e}", exc_info=True)
        report_lines.append("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º.")

    return split_message("".join(report_lines))


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == '__main__':
    print("–ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞...")
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    
    application.add_handler(CommandHandler('start', start))
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    application.add_handler(CallbackQueryHandler(button_callback))
    
    print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–±—ã—Ç–∏–π...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)