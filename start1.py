import logging
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters, CallbackQueryHandler, Application 
import datetime 

from facebook_business.api import FacebookAdsApi
from facebook_business.adobjects.adaccount import AdAccount
from facebook_business.adobjects.campaign import Campaign 
from facebook_business.adobjects.adset import AdSet 
from facebook_business.exceptions import FacebookRequestError

import io 
import matplotlib.pyplot as plt 

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import json 
import os 

plt.style.use('seaborn-v0_8-darkgrid') 

# --- –ö–õ–Æ–ß–ò –ò –ù–ê–°–¢–†–û–ô–ö–ò ---
TELEGRAM_TOKEN = '7879718352:AAFdjjlblqNROm4mq8GLB9pnRdUPIaq8lHw' 
ADMIN_TELEGRAM_ID = 5625120142  # –í–ê–®_–¢–ï–õ–ï–ì–†–ê–ú_ID_–°–Æ–î–ê (—á–∏—Å–ª–æ–º, –±–µ–∑ –∫–∞–≤—ã—á–µ–∫)

FB_ACCESS_TOKEN = 'EAAKhhJ2VeSsBPSLZBWCVZC3trqpLMW8RyU59XrbEn4y1R2KsbtdT1s9ncBTXZBSUgAhG3nA1Po5WVvnvayZCSq89FokeaaGP2Q0rm0Dc4uoWx5LBVJOGg8oeHedW9OhCwaUkJfk9c472gYCqVSKB2ZAB1Irlee3mAieZBuH7MPlsTklllrL5zbCzRT4LK0rWOGiLAmzwzFZAPlAF6m9awZA7ZCMPO0DV93WIxYdm6xKyGAjz1HXOxDTJE4rgPAwS0ifMZD' 
FB_APP_ID = '740540904995115'
FB_APP_SECRET = '7d665dc84c588fba122066991ea76f2b'
AD_ACCOUNT_ID = 'act_1573639266674008' 
# -----------------------------------------

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–æ—Ç–∞ ---
SETTINGS_FILE = 'bot_settings.json' 

def load_settings():
    if os.path.exists(SETTINGS_FILE):
        with open(SETTINGS_FILE, 'r') as f:
            try:
                settings = json.load(f)
                settings.setdefault('auto_reports_enabled', False)
                settings.setdefault('report_time', '09:00')
                settings.setdefault('notifications_enabled', False)
                settings.setdefault('cost_per_conversation_threshold', 2.0)
                settings.setdefault('last_cost_per_conversation_alert', None)
                settings.setdefault('login_code', '0105') 
                current_authorized_users = settings.get('authorized_users', [])
                if ADMIN_TELEGRAM_ID not in current_authorized_users:
                    current_authorized_users.append(ADMIN_TELEGRAM_ID)
                settings['authorized_users'] = list(set(current_authorized_users))
                settings.setdefault('daily_orders', {}) 
                return settings
            except json.JSONDecodeError:
                logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ {SETTINGS_FILE}. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
                return {
                    'auto_reports_enabled': False, 
                    'report_time': '09:00', 
                    'notifications_enabled': False, 
                    'cost_per_conversation_threshold': 2.0,
                    'last_cost_per_conversation_alert': None,
                    'login_code': '0105', 
                    'authorized_users': [ADMIN_TELEGRAM_ID],
                    'daily_orders': {} 
                }
    return {
        'auto_reports_enabled': False, 
        'report_time': '09:00', 
        'notifications_enabled': False, 
        'cost_per_conversation_threshold': 2.0,
        'last_cost_per_conversation_alert': None,
        'login_code': '0105', 
        'authorized_users': [ADMIN_TELEGRAM_ID],
        'daily_orders': {} 
    } 

def save_settings(settings):
    with open(SETTINGS_FILE, 'w') as f:
        json.dump(settings, f, indent=4)

bot_settings = load_settings()

scheduler = AsyncIOScheduler()
# --- –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ï–ö ---


logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# --- –í–°–ï –§–£–ù–ö–¶–ò–ò –û–ü–†–ï–î–ï–õ–Ø–Æ–¢–°–Ø –ó–î–ï–°–¨, –î–û –ë–õ–û–ö–ê if __name__ == '__main__': ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º, –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    user_id = update.effective_user.id
    if user_id not in bot_settings['authorized_users']:
        await context.bot.send_message(chat_id=user_id, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ `/auth <–≤–∞—à_–∫–æ–¥>` –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
        return

    keyboard = [
        [KeyboardButton("üìä –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç")], 
        [KeyboardButton("üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ")], 
        [KeyboardButton("üì¶ –ö–æ–ª. –∑–∞–∫–∞–∑–æ–≤")], # <-- –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê
        [KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")], 
        [KeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")], 
        [KeyboardButton("üìä –û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º")], # <-- –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await context.bot.send_message(
        chat_id=update.effective_chat.id, 
        text="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
        reply_markup=reply_markup
    )
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞, –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ –ø–æ–º–æ—â–∏.
    """
    user_id = update.effective_user.id
    if user_id not in bot_settings['authorized_users']: 
        await context.bot.send_message(chat_id=user_id, text="–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É. –í–≤–µ–¥–∏—Ç–µ `/auth <–≤–∞—à_–∫–æ–¥>` –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
        return
    
    text = update.message.text
    
    # --- –û–ë–†–ê–ë–û–¢–ö–ê –û–ñ–ò–î–ê–ï–ú–û–ì–û –í–í–û–î–ê –î–õ–Ø –ù–ê–°–¢–†–û–ï–ö ---
    if context.user_data.get('awaiting_input_for'):
        input_type = context.user_data.pop('awaiting_input_for')
        
        if input_type == 'cost_per_conversation_threshold':
            try:
                value = float(text)
                bot_settings['cost_per_conversation_threshold'] = value
                save_settings(bot_settings)
                await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–ü–æ—Ä–æ–≥ —Ü–µ–Ω—ã –∑–∞ –ø–µ—Ä–µ–ø–∏—Å–∫—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ **${value:.2f}**.")
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª 'cost_per_conversation_threshold' –Ω–∞ '{value}'.")
                await show_notification_settings_menu(update, context) 
            except ValueError:
                await context.bot.send_message(chat_id=update.effective_chat.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
                logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ—Ä–æ–≥–∞: '{text}'.")
                context.user_data['awaiting_input_for'] = 'cost_per_conversation_threshold' # –û—Å—Ç–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥
        # --- –£–î–ê–õ–ï–ù–û: –õ–û–ì–ò–ö–ê –í–í–û–î–ê –î–ê–¢–´ –ò –ö–û–õ–ò–ß–ï–°–¢–í–ê –ó–ê–ö–ê–ó–û–í –í handle_message (—Ç–µ–ø–µ—Ä—å +1 –ø–æ –∫–Ω–æ–ø–∫–µ) ---
        # (orders_date_input –∏ orders_count_input –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞)
        else: # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –≤–≤–æ–¥–∞
            await context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –≤–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")
            logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª —Ç–µ–∫—Å—Ç, –∫–æ–≥–¥–∞ –æ–∂–∏–¥–∞–ª—Å—è –≤–≤–æ–¥ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞: '{input_type}'.")
        return 

    # --- –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ë–õ–û–ö–ò ---
    if text == "üìä –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç":
        context.user_data['action_type'] = 'get_full_report' 
        await ask_for_period(update, context) 
    elif text == "üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ": 
        context.user_data['action_type'] = 'get_spend_summary' 
        await ask_for_period(update, context) 
    elif text == "üì¶ –ö–æ–ª. –∑–∞–∫–∞–∑–æ–≤": # <-- –ù–û–í–´–ô –ë–õ–û–ö –î–õ–Ø –ö–ù–û–ü–ö–ò "–ö–û–õ-–í–û –ó–ê–ö–ê–ó–û–í"
        await show_orders_management_menu(update, context) # –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
    elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏": 
        await show_settings_menu(update, context) 
    elif text == "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è": 
        await show_notification_settings_menu(update, context) 
    elif text == "üìä –û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º": # <-- –ù–û–í–´–ô –ë–õ–û–ö –î–õ–Ø –ö–ù–û–ü–ö–ò "–û–¢–ß–ï–¢ –ü–û –ü–†–û–î–ê–ñ–ê–ú"
        context.user_data['action_type'] = 'get_sales_report' # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
        await ask_for_period(update, context) # –ü—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥
    else: 
        await context.bot.send_message(
            chat_id=update.effective_chat.id, 
            text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é."
        )

async def ask_for_period(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in bot_settings['authorized_users']: 
        await context.bot.send_message(chat_id=user_id, text="–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É. –í–≤–µ–¥–∏—Ç–µ `/auth <–≤–∞—à_–∫–æ–¥>` –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
        return

    keyboard = [
        [InlineKeyboardButton("–ó–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data='period_today')],
        [InlineKeyboardButton("–ó–∞ –≤—á–µ—Ä–∞", callback_data='period_yesterday')],
        [InlineKeyboardButton("–ó–∞ 7 –¥–Ω–µ–π", callback_data='period_last_7d')],
        [InlineKeyboardButton("–ó–∞ 30 –¥–Ω–µ–π", callback_data='period_last_30d')],
        [InlineKeyboardButton("–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", callback_data='period_this_month')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?', reply_markup=reply_markup)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞.")

    context.user_data['last_message_id'] = update.message.message_id
    context.user_data['chat_id'] = update.effective_chat.id

async def show_settings_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in bot_settings['authorized_users']: 
        await context.bot.send_message(chat_id=user_id, text="–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É. –í–≤–µ–¥–∏—Ç–µ `/auth <–≤–∞—à_–∫–æ–¥>` –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
        return

    auto_reports_enabled = bot_settings.get('auto_reports_enabled', False)
    status_text = "–í–∫–ª" if auto_reports_enabled else "–í—ã–∫–ª"

    keyboard = [
        [InlineKeyboardButton(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã: {status_text}", callback_data='setting_toggle_auto_reports')],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='setting_back_to_main_menu')] 
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
        chat_id=update.effective_chat.id, 
        text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:", 
        reply_markup=reply_markup
    )
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.")

async def show_notification_settings_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    user_id = update.effective_user.id
    if user_id not in bot_settings['authorized_users']: 
        await context.bot.send_message(chat_id=user_id, text="–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É. –í–≤–µ–¥–∏—Ç–µ `/auth <–≤–∞—à_–∫–æ–¥>` –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
        return

    notifications_enabled = bot_settings.get('notifications_enabled', False)
    notifications_status_text = "–í–∫–ª" if notifications_enabled else "–í—ã–∫–ª"
    
    cost_per_conversation_threshold = bot_settings.get('cost_per_conversation_threshold', 2.0) 

    keyboard = [
        [InlineKeyboardButton(f"–°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {notifications_status_text}", callback_data='notification_setting_toggle_status')],
        [InlineKeyboardButton(f"–ü–æ—Ä–æ–≥ —Ü–µ–Ω—ã –∑–∞ –ø–µ—Ä–µ–ø–∏—Å–∫—É: ${cost_per_conversation_threshold:.2f}", callback_data='notification_setting_set_cost_per_conversation_threshold')],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='notification_setting_back_to_main_settings')], 
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
        chat_id=update.effective_chat.id, 
        text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —É—Ö—É–¥—à–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π):", 
        reply_markup=reply_markup
    )
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")

async def show_orders_management_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–∫–∞–∑–æ–≤."""
    user_id = update.effective_user.id
    if user_id not in bot_settings['authorized_users']: 
        await context.bot.send_message(chat_id=user_id, text="–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É. –í–≤–µ–¥–∏—Ç–µ `/auth <–≤–∞—à_–∫–æ–¥>` –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
        return

    today_date = datetime.date.today().isoformat()
    orders_today = bot_settings['daily_orders'].get(today_date, 0)

    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ (+1)", callback_data='orders_action_increment_today')], # <-- –ò–ó–ú–ï–ù–ï–ù–û: —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        [InlineKeyboardButton(f"üìà –ó–∞–∫–∞–∑–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {orders_today}", callback_data='orders_action_show_today')],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='orders_action_back_to_main_menu')] 
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
        chat_id=update.effective_chat.id, 
        text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏:", 
        reply_markup=reply_markup
    )
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤.")


async def check_for_alerts(bot_instance, chat_id: int, ad_account_id: str, fb_access_token: str, fb_app_id: str, fb_app_secret: str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–æ—Ä–æ–≥–∞–º
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram.
    """
    logging.info(f"–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ `{ad_account_id}`...")
    
    current_settings = load_settings()
    if chat_id not in current_settings['authorized_users'] or not current_settings.get('notifications_enabled', False):
        logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
        return 

    threshold = current_settings.get('cost_per_conversation_threshold', 2.0)
    last_alert_time_str = current_settings.get('last_cost_per_conversation_alert')

    COOLDOWN_PERIOD_SECONDS = 3600 # 1 —á–∞—Å

    try:
        FacebookAdsApi.init(app_id=fb_app_id, app_secret=fb_app_secret, access_token=fb_access_token)
        account = AdAccount(ad_account_id)

        insights_data = list(account.get_insights(
            params={'date_preset': 'today', 'fields': 'actions,cost_per_action_type'}
        ))
        
        current_cost_per_conversation = 0.0
        
        if insights_data and insights_data[0]:
            insights = insights_data[0]
            
            for cost_action in insights.get('cost_per_action_type', []):
                if cost_action.get('action_type') == 'onsite_conversion.total_messaging_connection':
                    current_cost_per_conversation = float(cost_action.get('value', '0'))
                    break

        logging.info(f"–ê–∫–∫–∞—É–Ω—Ç `{ad_account_id}`: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∑–∞ –ø–µ—Ä–µ–ø–∏—Å–∫—É: ${current_cost_per_conversation:.2f}, –ü–æ—Ä–æ–≥: ${threshold:.2f}")

        if current_cost_per_conversation > threshold and current_cost_per_conversation > 0:
            send_alert = False
            if last_alert_time_str:
                last_alert_datetime = datetime.datetime.fromisoformat(last_alert_time_str)
                time_since_last_alert = (datetime.datetime.now() - last_alert_datetime).total_seconds()
                if time_since_last_alert > COOLDOWN_PERIOD_SECONDS:
                    send_alert = True
                else:
                    logging.info(f"–ê–∫–∫–∞—É–Ω—Ç `{ad_account_id}`: –ê–ª–µ—Ä—Ç–∏–Ω–≥ –ø–æ —Ü–µ–Ω–µ –∑–∞ –ø–µ—Ä–µ–ø–∏—Å–∫—É –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ ({time_since_last_alert:.0f}s –∏–∑ {COOLDOWN_PERIOD_SECONDS}s).")
            else:
                send_alert = True 

            if send_alert:
                alert_message = (
                    f"‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï! –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å —É—Ö—É–¥—à–∏–ª—Å—è!**\n\n"
                    f"**–ê–∫–∫–∞—É–Ω—Ç:** `{ad_account_id}`\n"
                    f"**–ú–µ—Ç—Ä–∏–∫–∞:** –¶–µ–Ω–∞ –∑–∞ –ø–µ—Ä–µ–ø–∏—Å–∫—É\n"
                    f"  - **–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:** **${current_cost_per_conversation:.2f}**\n"
                    f"  - **–ó–∞–¥–∞–Ω–Ω—ã–π –ø–æ—Ä–æ–≥:** **${threshold:.2f}**\n\n"
                    f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏!"
                )
                await bot_instance.send_message(chat_id=chat_id, text=alert_message, parse_mode='Markdown')
                logging.warning(f"–û–¢–ü–†–ê–í–õ–ï–ù –ê–õ–ï–†–¢: –¶–µ–Ω–∞ –∑–∞ –ø–µ—Ä–µ–ø–∏—Å–∫—É –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –ø–æ—Ä–æ–≥ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ `{ad_account_id}`.")
                
                bot_settings['last_cost_per_conversation_alert'] = datetime.datetime.now().isoformat()
                save_settings(bot_settings)
        else:
            if last_alert_time_str:
                bot_settings['last_cost_per_conversation_alert'] = None
                save_settings(bot_settings)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ `{ad_account_id}`: {e}", exc_info=True)
        await bot_instance.send_message(chat_id=chat_id, text=f"**–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ `{ad_account_id}`:**\n{e}")


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer() 

    data = query.data 
    user_id = query.from_user.id
    chat_id = query.message.chat_id

    if user_id not in bot_settings['authorized_users']: 
        await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/auth <–≤–∞—à_–∫–æ–¥>` –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
        await context.bot.send_message(chat_id=user_id, text="–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É. –í–≤–µ–¥–∏—Ç–µ `/auth <–≤–∞—à_–∫–æ–¥>` –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
        return

    # 1. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø–µ—Ä–∏–æ–¥
    if data.startswith('period_'):
        period_type = data.replace('period_', '') 
        context.user_data['selected_period'] = period_type 
        
        if context.user_data.get('action_type') == 'get_spend_summary':
            await query.edit_message_text(text=f"–ú–∏–Ω—É—Ç–∫—É, –∑–∞–ø—Ä–∞—à–∏–≤–∞—é –æ–±—â–∏–µ —Ç—Ä–∞—Ç—ã –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É –∑–∞ '{period_type.replace('_', ' ').title()}' —É Facebook...")
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ–±—â–∏–µ —Ç—Ä–∞—Ç—ã –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É –∑–∞ {period_type}.")
            try:
                FacebookAdsApi.init(app_id=FB_APP_ID, app_secret=FB_APP_SECRET, access_token=FB_ACCESS_TOKEN)
                account = AdAccount(AD_ACCOUNT_ID) 
                
                insights_data = list(account.get_insights(
                    params={'date_preset': period_type, 'fields': 'spend'}
                ))
                
                total_spend = "0"
                if insights_data and insights_data[0]:
                    total_spend = insights_data[0].get('spend', '0')
                
                report_text = f"üí∏ **–û–±—â–∏–µ —Ç—Ä–∞—Ç—ã –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É ({period_type.replace('_', ' ').title()}):**\n\n" \
                              f"  –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: **${float(total_spend):.2f}**"
                
                await query.edit_message_text(text=report_text, parse_mode='Markdown')
                logging.info(f"–û–±—â–∏–µ —Ç—Ä–∞—Ç—ã –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –∑–∞ –ø–µ—Ä–∏–æ–¥ {period_type}.")

            except FacebookRequestError as e:
                error_message = f"–û—à–∏–±–∫–∞ Facebook API: –ö–æ–¥: {e.api_error_code()} - –°–æ–æ–±—â–µ–Ω–∏–µ: {e.api_error_message()}"
                logging.error(f"–û—à–∏–±–∫–∞ Facebook API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {error_message}", exc_info=True)
                await query.edit_message_text(text=error_message)
            except Exception as e:
                full_error = f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: {e}"
                logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {full_error}", exc_info=True)
                await query.edit_message_text(text=f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: {e}")
            
            context.user_data.pop('action_type', None) 
            return 

        # --- –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ü–†–û–°–ê "–û–¢–ß–ï–¢ –ü–û –ü–†–û–î–ê–ñ–ê–ú" ---
        elif context.user_data.get('action_type') == 'get_sales_report':
            report_parts = await get_sales_report(period_type, AD_ACCOUNT_ID, FB_ACCESS_TOKEN, FB_APP_ID, FB_APP_SECRET)
            if report_parts:
                for part in report_parts:
                    await context.bot.send_message(chat_id=chat_id, text=part, parse_mode='Markdown')
                logging.info(f"–û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –∑–∞ –ø–µ—Ä–∏–æ–¥ {period_type}.")
            else:
                await context.bot.send_message(chat_id=chat_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.", parse_mode='Markdown')
            
            context.user_data.pop('action_type', None) 
            return 
        
        keyboard = [
            [InlineKeyboardButton("–ü–æ –∫–∞–º–ø–∞–Ω–∏—è–º (–ø–æ–¥—Ä–æ–±–Ω–æ)", callback_data='level_campaigns')],
            [InlineKeyboardButton("–ü–æ –≥—Ä—É–ø–ø–∞–º –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–ø–æ–¥—Ä–æ–±–Ω–æ)", callback_data='level_adsets')], 
            [InlineKeyboardButton("–ü–æ –≥—Ä—É–ø–ø–∞–º (–∫—Ä–∞—Ç–∫–æ –ø–µ—Ä–µ–ø–∏—Å–∫–∏)", callback_data='level_brief_adsets_messages')], 
            [InlineKeyboardButton("üìä –°—Ä–∞–≤–Ω–∏—Ç—å –í—á–µ—Ä–∞ vs –°–µ–≥–æ–¥–Ω—è", callback_data='level_compare_daily')], 
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text=f"–ü–µ—Ä–∏–æ–¥: {period_type.replace('_', ' ').title()}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –æ—Ç—á–µ—Ç–∞:", 
            reply_markup=reply_markup
        )
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –ø–µ—Ä–∏–æ–¥: {period_type}. –ó–∞–ø—Ä–æ—Å —É—Ä–æ–≤–Ω—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏.")

    elif data.startswith('level_'):
        level_type = data.replace('level_', '') 
        selected_period = context.user_data.get('selected_period')

        if level_type != 'compare_daily' and not selected_period:
            await context.bot.send_message(chat_id=chat_id, text="–û—à–∏–±–∫–∞: –ü–µ—Ä–∏–æ–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–∞–≤ 'üìä –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç'.")
            logging.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.")
            return

        await context.bot.send_message(chat_id=chat_id, text=f"–ú–∏–Ω—É—Ç–∫—É, –∑–∞–ø—Ä–∞—à–∏–≤–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ '{level_type.replace('_', ' ').title()}' —É Facebook...")
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ—Ç—á–µ—Ç –ø–æ {level_type} –∑–∞ {selected_period if level_type != 'compare_daily' else '—Å–µ–≥–æ–¥–Ω—è/–≤—á–µ—Ä–∞'}.")

        try:
            FacebookAdsApi.init(app_id=FB_APP_ID, app_secret=FB_APP_SECRET, access_token=FB_ACCESS_TOKEN)
            account = AdAccount(AD_ACCOUNT_ID) 
            
            response_parts = [] 

            if level_type == 'campaigns':
                response_parts = await get_campaign_report(account, selected_period)
            elif level_type == 'adsets': 
                response_parts = await get_adset_report(account, selected_period)
            elif level_type == 'brief_adsets_messages': 
                response_parts = await get_brief_adset_report(account, selected_period)
            elif level_type == 'compare_daily': 
                response_parts = await get_daily_comparison_report(account, chat_id, context.bot) 
                
            else:
                response_parts = ["–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –æ—Ç—á–µ—Ç–∞."]
                logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –æ—Ç—á–µ—Ç–∞: {level_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")

            if response_parts:
                for part in response_parts:
                    if isinstance(part, str): 
                        await context.bot.send_message(chat_id=chat_id, text=part, parse_mode='Markdown')
                logging.info(f"–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –∑–∞ –ø–µ—Ä–∏–æ–¥ {selected_period if level_type != 'compare_daily' else '—Å–µ–≥–æ–¥–Ω—è/–≤—á–µ—Ä–∞'}.")
            else:
                await context.bot.send_message(chat_id=chat_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.", parse_mode='Markdown')


        except FacebookRequestError as e:
            error_message = f"–û—à–∏–±–∫–∞ Facebook API: –ö–æ–¥: {e.api_error_code()} - –°–æ–æ–±—â–µ–Ω–∏–µ: {e.api_error_message()}"
            logging.error(f"–û—à–∏–±–∫–∞ Facebook API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {error_message}", exc_info=True)
            await context.bot.send_message(chat_id=chat_id, text=error_message) 
        except Exception as e:
            full_error = f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: {e}"
            logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {full_error}", exc_info=True)
            await context.bot.send_message(chat_id=chat_id, text=f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: {e}") 

    # 3. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–æ–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞)
    elif data.startswith('setting_'):
        setting_type = data.replace('setting_', '')
        user_id = query.from_user.id
        chat_id = query.message.chat_id

        if setting_type == 'toggle_auto_reports':
            current_status = bot_settings.get('auto_reports_enabled', False) 
            new_status = not current_status
            bot_settings['auto_reports_enabled'] = new_status 
            save_settings(bot_settings) 

            if new_status:
                scheduler.add_job(
                    send_daily_auto_report,
                    CronTrigger(hour=bot_settings['report_time'].split(':')[0], minute=bot_settings['report_time'].split(':')[1]),
                    args=[context.bot, ADMIN_TELEGRAM_ID, FB_ACCESS_TOKEN, FB_APP_ID, FB_APP_SECRET, AD_ACCOUNT_ID], 
                    id='daily_auto_report',
                    replace_existing=True 
                )
                status_text = "–í–∫–ª—é—á–µ–Ω—ã"
                logging.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –í—Ä–µ–º—è: {bot_settings['report_time']}")
            else:
                if scheduler.get_job('daily_auto_report'):
                    scheduler.remove_job('daily_auto_report')
                    logging.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
                status_text = "–í—ã–∫–ª—é—á–µ–Ω—ã"
            
            await query.edit_message_text(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã —Ç–µ–ø–µ—Ä—å: **{status_text}**.", parse_mode='Markdown')
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ–∫–ª—é—á–∏–ª –∞–≤—Ç–æ–æ—Ç—á–µ—Ç—ã –≤ —Å—Ç–∞—Ç—É—Å: {status_text}.")
            await show_settings_menu(update, context) 
        
        elif setting_type == 'back_to_main_menu': 
            await context.bot.delete_message(chat_id=chat_id, message_id=query.message.message_id)
            keyboard = [[KeyboardButton("üìä –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç")], 
                        [KeyboardButton("üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ")], 
                        [KeyboardButton("üì¶ –ö–æ–ª. –∑–∞–∫–∞–∑–æ–≤")], 
                        [KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")], 
                        [KeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")], 
                        [KeyboardButton("üìä –û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º")], 
                        ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await context.bot.send_message(chat_id=chat_id, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!", reply_markup=reply_markup)
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")

        else:
            await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.")
            logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: {setting_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")

    # 4. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    elif data.startswith('notification_setting_'):
        setting_type = data.replace('notification_setting_', '')
        user_id = query.from_user.id
        chat_id = query.message.chat_id

        if setting_type == 'toggle_status':
            current_status = bot_settings.get('notifications_enabled', False)
            new_status = not current_status
            bot_settings['notifications_enabled'] = new_status
            save_settings(bot_settings) 

            if new_status:
                scheduler.add_job(
                    check_for_alerts,
                    'interval', minutes=30, 
                    args=[context.bot, ADMIN_TELEGRAM_ID, AD_ACCOUNT_ID, FB_ACCESS_TOKEN, FB_APP_ID, FB_APP_SECRET],
                    id='alert_check_job',
                    replace_existing=True
                )
                status_text = "–í–∫–ª—é—á–µ–Ω—ã"
                logging.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã. –ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
            else:
                if scheduler.get_job('alert_check_job'):
                    scheduler.remove_job('alert_check_job')
                    logging.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã. –ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤ —É–¥–∞–ª–µ–Ω–∞.")
                status_text = "–í—ã–∫–ª—é—á–µ–Ω—ã"
            
            await query.edit_message_text(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å: **{status_text}**.", parse_mode='Markdown')
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ–∫–ª—é—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç—É—Å: {status_text}.")
            await show_notification_settings_menu(update, context) 

        elif setting_type == 'set_cost_per_conversation_threshold':
            await query.edit_message_text("–ß—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥ —Ü–µ–Ω—ã –∑–∞ –ø–µ—Ä–µ–ø–∏—Å–∫—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '2.50').")
            context.user_data['awaiting_input_for'] = 'cost_per_conversation_threshold' 
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ—Ä–æ–≥–∞ —Ü–µ–Ω—ã –∑–∞ –ø–µ—Ä–µ–ø–∏—Å–∫—É.")
            
        elif setting_type == 'back_to_main_settings': 
            await context.bot.delete_message(chat_id=chat_id, message_id=query.message.message_id)
            await show_settings_menu(update, context) 
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")

        else:
            await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
            logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {setting_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")

    # 5. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏
    elif data.startswith('orders_action_'):
        action_type = data.replace('orders_action_', '')
        user_id = query.from_user.id
        chat_id = query.message.chat_id

        if action_type == 'increment_today': # –ö–Ω–æ–ø–∫–∞ "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ (+1)"
            today_date = datetime.date.today().isoformat()
            bot_settings.setdefault('daily_orders', {})
            current_orders = bot_settings['daily_orders'].get(today_date, 0)
            bot_settings['daily_orders'][today_date] = current_orders + 1
            save_settings(bot_settings)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–∫–∞–∑–æ–≤
            await query.edit_message_text(f"üì¶ –ó–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({today_date}): **{bot_settings['daily_orders'][today_date]}**.")
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª 1 –∑–∞–∫–∞–∑. –í—Å–µ–≥–æ –Ω–∞ {today_date}: {bot_settings['daily_orders'][today_date]}.")
            await show_orders_management_menu(update, context) # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤
        elif action_type == 'show_today':
            today_date = datetime.date.today().isoformat()
            orders_today = bot_settings['daily_orders'].get(today_date, 0)
            await query.edit_message_text(f"üìà –ó–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({today_date}): **{orders_today}**.")
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∑–∞–∫–∞–∑—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
            await show_orders_management_menu(update, context) 
        elif action_type == 'back_to_main_menu': 
            await context.bot.delete_message(chat_id=chat_id, message_id=query.message.message_id)
            keyboard = [[KeyboardButton("üìä –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç")], 
                        [KeyboardButton("üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ")], 
                        [KeyboardButton("üì¶ –ö–æ–ª. –∑–∞–∫–∞–∑–æ–≤")], 
                        [KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")], 
                        [KeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")], 
                        [KeyboardButton("üìä –û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º")]] 
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await context.bot.send_message(chat_id=chat_id, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!", reply_markup=reply_markup)
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –º–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤.")
        else:
            await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∑–∞–∫–∞–∑–∞–º–∏.")
            logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∑–∞–∫–∞–∑–∞–º–∏: {action_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")


# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ---
async def auth_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /auth –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–¥—É.
    """
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    if user_id in bot_settings['authorized_users']:
        await context.bot.send_message(chat_id=chat_id, text="–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
        return

    if not context.args:
        await context.bot.send_message(chat_id=chat_id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–∏–º–µ—Ä: `/auth 0105`")
        return

    entered_code = context.args[0] 

    if entered_code == bot_settings['login_code']:
        bot_settings['authorized_users'].append(user_id)
        save_settings(bot_settings) 
        
        await context.bot.send_message(chat_id=chat_id, text="üéâ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É.")
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è.")
        await start(update, context) 
    else:
        await context.bot.send_message(chat_id=chat_id, text="–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: '{entered_code}'.")

# --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ---


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏ (—á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç Telegram)
def split_message(text: str, max_length: int = 4000) -> list[str]:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ max_length."""
    parts = []
    current_part = ""
    lines = text.split('\n')
    
    for line in lines:
        if len(current_part) + len(line) + 1 > max_length: 
            parts.append(current_part.strip())
            current_part = ""
        current_part += line + '\n'
    
    if current_part: 
        parts.append(current_part.strip())
        
    return parts

async def send_daily_auto_report(bot_instance, chat_id: int, ad_account_id: str, fb_access_token: str, fb_app_id: str, fb_app_secret: str): 
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É –ø–æ –æ–¥–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º.
    """
    logging.info(f"–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É `{ad_account_id}`...")
    
    try:
        FacebookAdsApi.init(app_id=fb_app_id, app_secret=fb_app_secret, access_token=fb_access_token)
        account = AdAccount(ad_account_id) 
        
        report_parts = await get_campaign_report(account, 'today') 

        if report_parts:
            await bot_instance.send_message(chat_id=chat_id, text=f"üìä **–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É `{ad_account_id}`:**", parse_mode='Markdown')
            for part in report_parts:
                await bot_instance.send_message(chat_id=chat_id, text=part, parse_mode='Markdown')
            logging.info(f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id} –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ `{ad_account_id}`.")
        else:
            await bot_instance.send_message(chat_id=chat_id, text=f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ `{ad_account_id}`. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.", parse_mode='Markdown')

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id} –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ `{ad_account_id}`: {e}", exc_info=True)
        await bot_instance.send_message(chat_id=chat_id, text=f"**–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞:**\n{e}")

async def get_campaign_report(account: AdAccount, period: str) -> list[str]:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ (—á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è)."""
    active_campaigns = account.get_campaigns(
        fields=[Campaign.Field.name, Campaign.Field.id], 
        params={'effective_status': ['ACTIVE']} 
    )

    if not active_campaigns:
        return [f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥ '{period.replace('_', ' ').title()}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."]

    all_campaign_details = [] 
    
    for campaign in active_campaigns:
        campaign_id = campaign['id']
        campaign_name = campaign['name']

        insights_params = {
            'date_preset': period,
            'fields': 'spend,clicks,cpc,ctr,impressions,reach,conversions,frequency,actions,cost_per_action_type'
        }
        campaign_insights = list(campaign.get_insights(params=insights_params))
        insights = campaign_insights[0] if campaign_insights else {} 

        spend = insights.get('spend', '0')
        clicks = insights.get('clicks', '0')
        cpc = insights.get('cpc', '0')
        ctr = insights.get('ctr', '0')
        impressions = insights.get('impressions', '0')
        reach = insights.get('reach', '0')
        conversions = insights.get('conversions', '0') 
        frequency = insights.get('frequency', '0')

        messenger_sends = '0' 
        leads_generated = '0' 
        cost_per_messenger_send = '0'
        cost_per_lead = '0'

        actions_list = insights.get('actions', []) 
        for action in actions_list:
            action_type = action.get('action_type')
            value = str(action.get('value', '0')) 

            if action_type == 'onsite_conversion.total_messaging_connection':
                messenger_sends = value
            elif action_type == 'onsite_conversion.lead': 
                leads_generated = value
            
        cost_per_action_list = insights.get('cost_per_action_type', [])
        for cost_action in cost_per_action_list:
            action_type = cost_action.get('action_type')
            value = str(cost_action.get('value', '0')) 
            if action_type == 'onsite_conversion.total_messaging_connection':
                cost_per_messenger_send = value
            elif action_type == 'onsite_conversion.lead':
                cost_per_lead = value

        campaign_detail_text = (
            f"üåü –ö–∞–º–ø–∞–Ω–∏—è *{campaign_name}*:\n"
            f"  - üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: **${float(spend):.2f}**\n" 
            f"  - üñ± –ö–ª–∏–∫–∏: **{clicks}**\n"
            f"  - üí∞ –¶–µ–Ω–∞ –∑–∞ –∫–ª–∏–∫ (CPC): **${float(cpc):.2f}**\n"
            f"  - üéØ CTR: **${float(ctr):.2f}%**\n"
            f"  - üëÄ –ü–æ–∫–∞–∑—ã: **{impressions}**\n"
            f"  - üë§ –û—Ö–≤–∞—Ç: **{reach}**\n"
            f"  - ‚ú® –ö–æ–Ω–≤–µ—Ä—Å–∏–∏ (–æ–±—â–∏–µ): **{conversions}**\n"
            f"  - üí¨ –ù–∞—á–∞—Ç–æ –ø–µ—Ä–µ–ø–∏—Å–æ–∫: **{messenger_sends}**\n" 
            f"  - üí∞ –¶–µ–Ω–∞ –∑–∞ –ø–µ—Ä–µ–ø–∏—Å–∫—É: **${float(cost_per_messenger_send):.2f}**\n" 
            f"  - üìù –õ–∏–¥—ã (—Å —Ñ–æ—Ä–º): **${float(cost_per_lead):.2f}**\n" 
            f"  - üîÅ –ß–∞—Å—Ç–æ—Ç–∞: **${float(frequency):.2f}**\n\n"
        )
        all_campaign_details.append(campaign_detail_text)
    
    header = f"üìä **–û—Ç—á–µ—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –∫–∞–º–ø–∞–Ω–∏—è–º ({period.replace('_', ' ').title()}):**\n\n"
    full_report_text = header + "".join(all_campaign_details)
    return split_message(full_report_text)


async def get_adset_report(account: AdAccount, period: str) -> list[str]:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≥—Ä—É–ø–ø–∞–º –æ–±—ä—è–≤–ª–µ–Ω–∏–π (Adsets) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫."""
    
    active_campaigns = account.get_campaigns(
        fields=[Campaign.Field.name, Campaign.Field.id],
        params={'effective_status': ['ACTIVE']}
    )

    if not active_campaigns:
        return ["–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø –æ–±—ä—è–≤–ª–µ–Ω–∏–π."]

    all_adset_details = [] 
    
    found_adsets_in_period = False 
    for campaign in active_campaigns:
        campaign_name = campaign['name']
        
        adsets = campaign.get_ad_sets( 
            fields=[AdSet.Field.name, AdSet.Field.id],
            params={'effective_status': ['ACTIVE']}
        )
        
        for adset in adsets:
            adset_name = adset['name']
            
            insights_params = {
                'date_preset': period,
                'fields': 'spend,clicks,cpc,ctr,impressions,reach,conversions,frequency,actions,cost_per_action_type'
            }
            adset_insights = list(adset.get_insights(params=insights_params))
            insights = adset_insights[0] if adset_insights else {}

            if float(insights.get('spend', '0')) > 0 or float(insights.get('clicks', '0')) > 0:
                found_adsets_in_period = True
                
                spend = insights.get('spend', '0')
                clicks = insights.get('clicks', '0')
                cpc = insights.get('cpc', '0')
                ctr = insights.get('ctr', '0')
                impressions = insights.get('impressions', '0')
                reach = insights.get('reach', '0')
                conversions = insights.get('conversions', '0') 
                frequency = insights.get('frequency', '0')

                messenger_sends = '0' 
                leads_generated = '0' 
                cost_per_messenger_send = '0'
                cost_per_lead = '0'

                actions_list = insights.get('actions', []) 
                for action in actions_list:
                    action_type = action.get('action_type')
                    value = str(action.get('value', '0'))
                    if action_type == 'onsite_conversion.total_messaging_connection':
                        messenger_sends = value
                    elif action_type == 'onsite_conversion.lead': 
                        leads_generated = value

                cost_per_action_list = insights.get('cost_per_action_type', [])
                for cost_action in cost_per_action_list:
                    action_type = cost_action.get('action_type')
                    value = str(cost_action.get('value', '0'))
                    if action_type == 'onsite_conversion.total_messaging_connection':
                        cost_per_messenger_send = value
                    elif action_type == 'onsite_conversion.lead':
                        cost_per_lead = value

                adset_detail_text = (
                    f"üî• –ì—Ä—É–ø–ø–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π *{adset_name}* (–ö–∞–º–ø–∞–Ω–∏—è: {campaign_name}):\n"
                    f"  - üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: **${float(spend):.2f}**\n" 
                    f"  - üñ± –ö–ª–∏–∫–∏: **{clicks}**\n"
                    f"  - üí∞ –¶–µ–Ω–∞ –∑–∞ –∫–ª–∏–∫ (CPC): **${float(cpc):.2f}**\n"
                    f"  - üéØ CTR: **${float(ctr):.2f}%**\n"
                    f"  - üëÄ –ü–æ–∫–∞–∑—ã: **{impressions}**\n"
                    f"  - üë§ –û—Ö–≤–∞—Ç: **{reach}**\n"
                    f"  - ‚ú® –ö–æ–Ω–≤–µ—Ä—Å–∏–∏ (–æ–±—â–∏–µ): **{conversions}**\n"
                    f"  - üí¨ –ù–∞—á–∞—Ç–æ –ø–µ—Ä–µ–ø–∏—Å–æ–∫: **{messenger_sends}**\n" 
                    f"  - üí∞ –¶–µ–Ω–∞ –∑–∞ –ø–µ—Ä–µ–ø–∏—Å–∫—É: **${float(cost_per_messenger_send):.2f}**\n" 
                    f"  - üìù –õ–∏–¥—ã (—Å —Ñ–æ—Ä–º): **${float(cost_per_lead):.2f}**\n" 
                    f"  - üîÅ –ß–∞—Å—Ç–æ—Ç–∞: **${float(frequency):.2f}**\n\n"
                )
                all_adset_details.append(adset_detail_text)
    
    if not found_adsets_in_period:
        return [f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ '{period.replace('_', ' ').title()}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."]

    header = f"üìä **–û—Ç—á–µ—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –≥—Ä—É–ø–ø–∞–º –æ–±—ä—è–≤–ª–µ–Ω–∏–π ({period.replace('_', ' ').title()}):**\n\n"
    full_report_text = header + "".join(all_adset_details)
    return split_message(full_report_text)


async def get_brief_adset_report(account: AdAccount, period: str) -> list[str]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ –≥—Ä—É–ø–ø–∞–º –æ–±—ä—è–≤–ª–µ–Ω–∏–π (Adsets) —Å —Ñ–æ–∫—É—Å–æ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∞—Ö –∏ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ (—á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è).
    """
    active_campaigns = account.get_campaigns(
        fields=[Campaign.Field.name, Campaign.Field.id],
        params={'effective_status': ['ACTIVE']}
    )

    if not active_campaigns:
        return ["–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–¥–ª—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞)."]

    all_brief_adset_details = [] 
    
    found_adsets_with_messages = False 
    for campaign in active_campaigns:
        campaign_name = campaign['name']
        
        adsets = campaign.get_ad_sets( 
            fields=[AdSet.Field.name, AdSet.Field.id],
            params={'effective_status': ['ACTIVE']}
        )
        
        for adset in adsets:
            adset_name = adset['name']
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ actions –∏ cost_per_action_type –¥–ª—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            insights_params = {
                'date_preset': period,
                'fields': 'actions,cost_per_action_type' 
            }
            adset_insights = list(adset.get_insights(params=insights_params))
            insights = adset_insights[0] if adset_insights else {}

            messenger_sends = '0' 
            cost_per_messenger_send = '0'
            
            actions_list = insights.get('actions', []) 
            for action in actions_list:
                action_type = action.get('action_type')
                value = str(action.get('value', '0'))
                if action_type == 'onsite_conversion.total_messaging_connection':
                    messenger_sends = value
                # –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ action_type –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å–æ–∫, –¥–æ–±–∞–≤—å –∏—Ö —Å—é–¥–∞ –∏ —Å—É–º–º–∏—Ä—É–π

            cost_per_action_list = insights.get('cost_per_action_type', [])
            for cost_action in cost_per_action_list:
                action_type = cost_action.get('action_type')
                value = str(cost_action.get('value', '0'))
                if action_type == 'onsite_conversion.total_messaging_connection':
                    cost_per_messenger_send = value
                # –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ action_type –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å–æ–∫, –¥–æ–±–∞–≤—å –∏—Ö —Å—é–¥–∞ –∏ —É—Å—Ä–µ–¥–Ω—è–π –∏–ª–∏ –≤—ã–±–∏—Ä–∞–π –æ—Å–Ω–æ–≤–Ω—É—é

            # –î–æ–±–∞–≤–ª—è–µ–º adset –≤ –æ—Ç—á–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
            if float(messenger_sends) > 0: 
                found_adsets_with_messages = True
                
                brief_adset_detail_text = (
                    f"üí¨ –ì—Ä—É–ø–ø–∞ *{adset_name}* (–ö–∞–º–ø–∞–Ω–∏—è: {campaign_name}):\n"
                    f"  - –ù–∞—á–∞—Ç–æ –ø–µ—Ä–µ–ø–∏—Å–æ–∫: **{messenger_sends}**\n" 
                    f"  - –¶–µ–Ω–∞ –∑–∞ –ø–µ—Ä–µ–ø–∏—Å–∫—É: **${float(cost_per_messenger_send):.2f}**\n\n" 
                )
                all_brief_adset_details.append(brief_adset_detail_text)
    
    if not found_adsets_with_messages:
        return [f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –ø–µ—Ä–µ–ø–∏—Å–∫–∞–º–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ '{period.replace('_', ' ').title()}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."]

    header = f"üìä **–ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ –≥—Ä—É–ø–ø–∞–º –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–ü–µ—Ä–µ–ø–∏—Å–∫–∏, {period.replace('_', ' ').title()}):**\n\n"
    full_report_text = header + "".join(all_brief_adset_details)
    return split_message(full_report_text)


async def get_daily_comparison_report(account: AdAccount, chat_id: int, bot) -> list[str]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç-—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ "–í—á–µ—Ä–∞ vs –°–µ–≥–æ–¥–Ω—è" –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ (–ø–æ—Ç—Ä–∞—á–µ–Ω–æ, –ø–µ—Ä–µ–ø–∏—Å–∫–∏, —Ü–µ–Ω–∞).
    –¢–∞–∫–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∏–∞–≥—Ä–∞–º–º—É.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ (—á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è), –∏—Å–∫–ª—é—á–∞—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é.
    """
    report_lines = []
    
    # 1. –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –≤—á–µ—Ä–∞
    insights_today = {}
    insights_yesterday = {}

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è (—É—Ä–æ–≤–µ–Ω—å –∞–∫–∫–∞—É–Ω—Ç–∞, –Ω–µ –∫–∞–º–ø–∞–Ω–∏–π)
        today_insights_data = list(account.get_insights(
            params={'date_preset': 'today', 'fields': 'spend,actions,cost_per_action_type'}
        ))
        if today_insights_data:
            insights_today = today_insights_data[0]

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤—á–µ—Ä–∞ (—É—Ä–æ–≤–µ–Ω—å –∞–∫–∫–∞—É–Ω—Ç–∞)
        yesterday_insights_data = list(account.get_insights(
            params={'date_preset': 'yesterday', 'fields': 'spend,actions,cost_per_action_type'}
        ))
        if yesterday_insights_data:
            insights_yesterday = yesterday_insights_data[0]

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}", exc_info=True)
        return ["–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."]

    # 2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ (–¥–ª—è —Å–µ–≥–æ–¥–Ω—è –∏ –≤—á–µ—Ä–∞)
    # –°–µ–≥–æ–¥–Ω—è
    spend_today = float(insights_today.get('spend', '0'))
    messenger_sends_today = '0'
    cost_per_messenger_send_today = '0'

    for action in insights_today.get('actions', []):
        if action.get('action_type') == 'onsite_conversion.total_messaging_connection':
            messenger_sends_today = str(action.get('value', '0'))
            break 
    for cost_action in insights_today.get('cost_per_action_type', []):
        if cost_action.get('action_type') == 'onsite_conversion.total_messaging_connection':
            cost_per_messenger_send_today = str(cost_action.get('value', '0'))
            break
    
    # –í—á–µ—Ä–∞
    spend_yesterday = float(insights_yesterday.get('spend', '0'))
    messenger_sends_yesterday = '0'
    cost_per_messenger_send_yesterday = '0'

    for action in insights_yesterday.get('actions', []):
        if action.get('action_type') == 'onsite_conversion.total_messaging_connection':
            messenger_sends_yesterday = str(action.get('value', '0'))
            break
    for cost_action in insights_yesterday.get('cost_per_action_type', []):
        if cost_action.get('action_type') == 'onsite_conversion.total_messaging_connection':
            cost_per_messenger_send_yesterday = str(cost_action.get('value', '0'))
            break

    # 3. –†–∞—Å—á–µ—Ç —Ä–∞–∑–Ω–∏—Ü—ã –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç—á–µ—Ç–∞
    report_lines.append("üìä **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π: –°–µ–≥–æ–¥–Ω—è vs –í—á–µ—Ä–∞ (–ø–æ –∞–∫–∫–∞—É–Ω—Ç—É)**\n\n")

    # –ü–æ—Ç—Ä–∞—á–µ–Ω–æ
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º 1e-9 (–æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–æ–µ —á–∏—Å–ª–æ) –≤–º–µ—Å—Ç–æ 0 –¥–ª—è –¥–µ–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç
    spend_diff_percent = ((spend_today - spend_yesterday) / (spend_yesterday or 1e-9) * 100) if spend_today > 0 or spend_yesterday > 0 else 0
    report_lines.append(f"üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ:\n  - –°–µ–≥–æ–¥–Ω—è: **${spend_today:.2f}**\n  - –í—á–µ—Ä–∞: **${spend_yesterday:.2f}**\n  - –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {spend_diff_percent:.2f}% {'‚¨ÜÔ∏è' if spend_diff_percent > 0 else ('‚¨áÔ∏è' if spend_diff_percent < 0 else '‚ÜîÔ∏è')}\n\n")

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–ø–∏—Å–æ–∫
    sends_today_val = float(messenger_sends_today)
    sends_yesterday_val = float(messenger_sends_yesterday)
    sends_diff_percent = ((sends_today_val - sends_yesterday_val) / (sends_yesterday_val or 1e-9) * 100) if sends_today_val > 0 or sends_yesterday_val > 0 else 0
    report_lines.append(f"üí¨ –ù–∞—á–∞—Ç–æ –ø–µ—Ä–µ–ø–∏—Å–æ–∫:\n  - –°–µ–≥–æ–¥–Ω—è: **{int(sends_today_val)}**\n  - –í—á–µ—Ä–∞: **{int(sends_yesterday_val)}**\n  - –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {sends_diff_percent:.2f}% {'‚¨ÜÔ∏è' if sends_diff_percent > 0 else ('‚¨áÔ∏è' if sends_diff_percent < 0 else '‚ÜîÔ∏è')}\n\n")

    # –¶–µ–Ω–∞ –∑–∞ –ø–µ—Ä–µ–ø–∏—Å–∫—É (CPC –Ω–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∏)
    cpm_today_val = float(cost_per_messenger_send_today)
    cpm_yesterday_val = float(cost_per_messenger_send_yesterday)
    cpm_diff_percent = ((cpm_today_val - cpm_yesterday_val) / (cpm_yesterday_val or 1e-9) * 100) if cpm_today_val > 0 or cpm_yesterday_val > 0 else 0
    # –î–ª—è —Ü–µ–Ω—ã —Å—Ç—Ä–µ–ª–∫–∏ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã (–º–µ–Ω—å—à–∞—è —Ü–µ–Ω–∞ - –ª—É—á—à–µ)
    report_lines.append(f"üí∞ –¶–µ–Ω–∞ –∑–∞ –ø–µ—Ä–µ–ø–∏—Å–∫—É:\n  - –°–µ–≥–æ–¥–Ω—è: **${cpm_today_val:.2f}**\n  - –í—á–µ—Ä–∞: **${cpm_yesterday_val:.2f}**\n  - –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {cpm_diff_percent:.2f}% {'‚¨áÔ∏è' if cpm_diff_percent > 0 else ('‚¨ÜÔ∏è' if cpm_diff_percent < 0 else '‚ÜîÔ∏è')}\n\n") 

    # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã
    try:
        if spend_today + spend_yesterday > 0 or sends_today_val + sends_yesterday_val > 0:
            labels = ['–í—á–µ—Ä–∞', '–°–µ–≥–æ–¥–Ω—è']
            bar_width = 0.5 # –¢–æ–ª—â–∏–Ω–∞ –ø–æ–ª–æ—Å—ã

            # --- –ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–∞—Ç ---
            fig1, ax1 = plt.subplots(figsize=(6, 3)) # –£–º–µ–Ω—å—à–∏–ª –≤—ã—Å–æ—Ç—É –¥–ª—è —Ç–æ–Ω–∫–∏—Ö –ø–æ–ª–æ—Å
            spends = [spend_yesterday, spend_today]
            
            # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞
            y_pos_spends = range(len(labels))
            ax1.barh(y_pos_spends, spends, height=bar_width, color=['lightcoral', 'skyblue'])
            ax1.set_yticks(y_pos_spends)
            ax1.set_yticklabels(labels)
            ax1.set_title('–¢—Ä–∞—Ç—ã')
            ax1.set_xlabel('–°—É–º–º–∞ ($)')
            ax1.invert_yaxis() # –°–≤–µ—Ä—Ö—É "–í—á–µ—Ä–∞", —Å–Ω–∏–∑—É "–°–µ–≥–æ–¥–Ω—è"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –ø–æ–ª–æ—Å—ã
            for i, v in enumerate(spends):
                ax1.text(v + (max(spends)*0.05 if max(spends) > 0 else 1), i, f'${v:.2f}', va='center', ha='left', fontsize=9)
            
            plt.tight_layout()
            
            buf1 = io.BytesIO()
            plt.savefig(buf1, format='png', bbox_inches='tight')
            buf1.seek(0)
            plt.close(fig1) 

            await bot.send_photo(chat_id=chat_id, photo=buf1, caption="–î–∏–Ω–∞–º–∏–∫–∞ —Ç—Ä–∞—Ç –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É:")
            
            # --- –ì—Ä–∞—Ñ–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–ø–∏—Å–æ–∫ ---
            fig2, ax2 = plt.subplots(figsize=(6, 3)) # –£–º–µ–Ω—å—à–∏–ª –≤—ã—Å–æ—Ç—É
            sends_counts = [sends_yesterday_val, sends_today_val]
            
            # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞
            y_pos_sends = range(len(labels))
            ax2.barh(y_pos_sends, sends_counts, height=bar_width, color=['lightcoral', 'skyblue'])
            ax2.set_yticks(y_pos_sends)
            ax2.set_yticklabels(labels)
            ax2.set_title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–ø–∏—Å–æ–∫')
            ax2.set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
            ax2.invert_yaxis() # –°–≤–µ—Ä—Ö—É "–í—á–µ—Ä–∞", —Å–Ω–∏–∑—É "–°–µ–≥–æ–¥–Ω—è"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –ø–æ–ª–æ—Å—ã
            for i, v in enumerate(sends_counts):
                ax2.text(v + (max(sends_counts)*0.05 if max(sends_counts) > 0 else 1), i, f'{int(v)}', va='center', ha='left', fontsize=9)
            
            plt.tight_layout()

            buf2 = io.BytesIO()
            plt.savefig(buf2, format='png', bbox_inches='tight')
            buf2.seek(0)
            plt.close(fig2)

            await bot.send_photo(chat_id=chat_id, photo=buf2, caption="–î–∏–Ω–∞–º–∏–∫–∞ –ø–µ—Ä–µ–ø–∏—Å–æ–∫ –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É:")

        else:
            report_lines.append("–ù–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞ –¥–Ω—è.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã: {e}", exc_info=True)
        report_lines.append("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º.")

    return split_message("".join(report_lines))


# –ù–æ–≤–∞—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
async def start_scheduler_safely(context: ContextTypes.DEFAULT_TYPE):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç APScheduler –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á–∏, –µ—Å–ª–∏ –æ–Ω–∏ –≤–∫–ª—é—á–µ–Ω—ã,
    –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ Telegram-–±–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è.
    """
    logging.info("–§—É–Ω–∫—Ü–∏—è start_scheduler_safely –∑–∞–ø—É—â–µ–Ω–∞.")

    if not scheduler.running:
        scheduler.start()
        logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ APScheduler —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ job_queue.")

    # Re-add the daily report job if auto-reports are enabled in settings
    if bot_settings['auto_reports_enabled']:
        if 'daily_auto_report' not in [job.id for job in scheduler.get_jobs()]: 
            scheduler.add_job(
                send_daily_auto_report,
                CronTrigger(hour=bot_settings['report_time'].split(':')[0], minute=bot_settings['report_time'].split(':')[1]),
                args=[context.bot, ADMIN_TELEGRAM_ID, FB_ACCESS_TOKEN, FB_APP_ID, FB_APP_SECRET, AD_ACCOUNT_ID], 
                id='daily_auto_report',
                replace_existing=True 
            )
            logging.info(f"–ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ job_queue. –í—Ä–µ–º—è: {bot_settings['report_time']}")
    else:
        if scheduler.get_job('daily_auto_report'): 
            scheduler.remove_job('daily_auto_report')
            logging.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ.")


# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ---
async def auth_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /auth –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–¥—É.
    """
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    if user_id in bot_settings['authorized_users']:
        await context.bot.send_message(chat_id=chat_id, text="–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
        return

    if not context.args:
        await context.bot.send_message(chat_id=chat_id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–∏–º–µ—Ä: `/auth 0105`")
        return

    entered_code = context.args[0] 

    if entered_code == bot_settings['login_code']:
        bot_settings['authorized_users'].append(user_id)
        save_settings(bot_settings) 
        
        await context.bot.send_message(chat_id=chat_id, text="üéâ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É.")
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è.")
        await start(update, context) 
    else:
        await context.bot.send_message(chat_id=chat_id, text="–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: '{entered_code}'.")

# --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ---


# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø –ó–ê–ö–ê–ó–û–í ---
def save_orders_for_date(date_str: str, count: int):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –¥–∞—Ç—ã –≤ bot_settings.
    """
    bot_settings['daily_orders'][date_str] = count
    save_settings(bot_settings)
    logging.info(f"–ó–∞–∫–∞–∑—ã –∑–∞ {date_str} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {count}")
# --- –ö–û–ù–ï–¶ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ô –§–£–ù–ö–¶–ò–ò ---


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏ (—á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç Telegram)
def split_message(text: str, max_length: int = 4000) -> list[str]:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ max_length."""
    parts = []
    current_part = ""
    lines = text.split('\n')
    
    for line in lines:
        if len(current_part) + len(line) + 1 > max_length: 
            parts.append(current_part.strip())
            current_part = ""
        current_part += line + '\n'
    
    if current_part: 
        parts.append(current_part.strip())
        
    return parts

async def send_daily_auto_report(bot_instance, chat_id: int, ad_account_id: str, fb_access_token: str, fb_app_id: str, fb_app_secret: str): 
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É –ø–æ –æ–¥–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º.
    """
    logging.info(f"–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É `{ad_account_id}`...")
    
    try:
        FacebookAdsApi.init(app_id=fb_app_id, app_secret=fb_app_secret, access_token=fb_access_token)
        account = AdAccount(ad_account_id) 
        
        report_parts = await get_campaign_report(account, 'today') 

        if report_parts:
            await bot_instance.send_message(chat_id=chat_id, text=f"üìä **–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É `{ad_account_id}`:**", parse_mode='Markdown')
            for part in report_parts:
                await bot_instance.send_message(chat_id=chat_id, text=part, parse_mode='Markdown')
            logging.info(f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id} –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ `{ad_account_id}`.")
        else:
            await bot_instance.send_message(chat_id=chat_id, text=f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ `{ad_account_id}`. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.", parse_mode='Markdown')

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id} –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ `{ad_account_id}`: {e}", exc_info=True)
        await bot_instance.send_message(chat_id=chat_id, text=f"**–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞:**\n{e}")

async def get_campaign_report(account: AdAccount, period: str) -> list[str]:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ (—á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è)."""
    active_campaigns = account.get_campaigns(
        fields=[Campaign.Field.name, Campaign.Field.id], 
        params={'effective_status': ['ACTIVE']} 
    )

    if not active_campaigns:
        return [f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥ '{period.replace('_', ' ').title()}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."]

    all_campaign_details = [] 
    
    for campaign in active_campaigns:
        campaign_id = campaign['id']
        campaign_name = campaign['name']

        insights_params = {
            'date_preset': period,
            'fields': 'spend,clicks,cpc,ctr,impressions,reach,conversions,frequency,actions,cost_per_action_type'
        }
        campaign_insights = list(campaign.get_insights(params=insights_params))
        insights = campaign_insights[0] if campaign_insights else {} 

        spend = insights.get('spend', '0')
        clicks = insights.get('clicks', '0')
        cpc = insights.get('cpc', '0')
        ctr = insights.get('ctr', '0')
        impressions = insights.get('impressions', '0')
        reach = insights.get('reach', '0')
        conversions = insights.get('conversions', '0') 
        frequency = insights.get('frequency', '0')

        messenger_sends = '0' 
        leads_generated = '0' 
        cost_per_messenger_send = '0'
        cost_per_lead = '0'

        actions_list = insights.get('actions', []) 
        for action in actions_list:
            action_type = action.get('action_type')
            value = str(action.get('value', '0')) 

            if action_type == 'onsite_conversion.total_messaging_connection':
                messenger_sends = value
            elif action_type == 'onsite_conversion.lead': 
                leads_generated = value
            
        cost_per_action_list = insights.get('cost_per_action_type', [])
        for cost_action in cost_per_action_list:
            action_type = cost_action.get('action_type')
            value = str(cost_action.get('value', '0')) 
            if action_type == 'onsite_conversion.total_messaging_connection':
                cost_per_messenger_send = value
            elif action_type == 'onsite_conversion.lead':
                cost_per_lead = value

        campaign_detail_text = (
            f"üåü –ö–∞–º–ø–∞–Ω–∏—è *{campaign_name}*:\n"
            f"  - üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: **${float(spend):.2f}**\n" 
            f"  - üñ± –ö–ª–∏–∫–∏: **{clicks}**\n"
            f"  - üí∞ –¶–µ–Ω–∞ –∑–∞ –∫–ª–∏–∫ (CPC): **${float(cpc):.2f}**\n"
            f"  - üéØ CTR: **${float(ctr):.2f}%**\n"
            f"  - üëÄ –ü–æ–∫–∞–∑—ã: **{impressions}**\n"
            f"  - üë§ –û—Ö–≤–∞—Ç: **{reach}**\n"
            f"  - ‚ú® –ö–æ–Ω–≤–µ—Ä—Å–∏–∏ (–æ–±—â–∏–µ): **{conversions}**\n"
            f"  - üí¨ –ù–∞—á–∞—Ç–æ –ø–µ—Ä–µ–ø–∏—Å–æ–∫: **{messenger_sends}**\n" 
            f"  - üí∞ –¶–µ–Ω–∞ –∑–∞ –ø–µ—Ä–µ–ø–∏—Å–∫—É: **${float(cost_per_messenger_send):.2f}**\n" 
            f"  - üìù –õ–∏–¥—ã (—Å —Ñ–æ—Ä–º): **${float(cost_per_lead):.2f}**\n" 
            f"  - üîÅ –ß–∞—Å—Ç–æ—Ç–∞: **${float(frequency):.2f}**\n\n"
        )
        all_campaign_details.append(campaign_detail_text)
    
    header = f"üìä **–û—Ç—á–µ—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –∫–∞–º–ø–∞–Ω–∏—è–º ({period.replace('_', ' ').title()}):**\n\n"
    full_report_text = header + "".join(all_campaign_details)
    return split_message(full_report_text)


async def get_adset_report(account: AdAccount, period: str) -> list[str]:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≥—Ä—É–ø–ø–∞–º –æ–±—ä—è–≤–ª–µ–Ω–∏–π (Adsets) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫."""
    
    active_campaigns = account.get_campaigns(
        fields=[Campaign.Field.name, Campaign.Field.id],
        params={'effective_status': ['ACTIVE']}
    )

    if not active_campaigns:
        return ["–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø –æ–±—ä—è–≤–ª–µ–Ω–∏–π."]

    all_adset_details = [] 
    
    found_adsets_in_period = False 
    for campaign in active_campaigns:
        campaign_name = campaign['name']
        
        adsets = campaign.get_ad_sets( 
            fields=[AdSet.Field.name, AdSet.Field.id],
            params={'effective_status': ['ACTIVE']}
        )
        
        for adset in adsets:
            adset_name = adset['name']
            
            insights_params = {
                'date_preset': period,
                'fields': 'spend,clicks,cpc,ctr,impressions,reach,conversions,frequency,actions,cost_per_action_type'
            }
            adset_insights = list(adset.get_insights(params=insights_params))
            insights = adset_insights[0] if adset_insights else {}

            if float(insights.get('spend', '0')) > 0 or float(insights.get('clicks', '0')) > 0:
                found_adsets_in_period = True
                
                spend = insights.get('spend', '0')
                clicks = insights.get('clicks', '0')
                cpc = insights.get('cpc', '0')
                ctr = insights.get('ctr', '0')
                impressions = insights.get('impressions', '0')
                reach = insights.get('reach', '0')
                conversions = insights.get('conversions', '0') 
                frequency = insights.get('frequency', '0')

                messenger_sends = '0' 
                leads_generated = '0' 
                cost_per_messenger_send = '0'
                cost_per_lead = '0'

                actions_list = insights.get('actions', []) 
                for action in actions_list:
                    action_type = action.get('action_type')
                    value = str(action.get('value', '0'))
                    if action_type == 'onsite_conversion.total_messaging_connection':
                        messenger_sends = value
                    elif action_type == 'onsite_conversion.lead': 
                        leads_generated = value

                cost_per_action_list = insights.get('cost_per_action_type', [])
                for cost_action in cost_per_action_list:
                    action_type = cost_action.get('action_type')
                    value = str(cost_action.get('value', '0'))
                    if action_type == 'onsite_conversion.total_messaging_connection':
                        cost_per_messenger_send = value
                    elif action_type == 'onsite_conversion.lead':
                        cost_per_lead = value

                adset_detail_text = (
                    f"üî• –ì—Ä—É–ø–ø–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π *{adset_name}* (–ö–∞–º–ø–∞–Ω–∏—è: {campaign_name}):\n"
                    f"  - üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: **${float(spend):.2f}**\n" 
                    f"  - üñ± –ö–ª–∏–∫–∏: **{clicks}**\n"
                    f"  - üí∞ –¶–µ–Ω–∞ –∑–∞ –∫–ª–∏–∫ (CPC): **${float(cpc):.2f}**\n"
                    f"  - üéØ CTR: **${float(ctr):.2f}%**\n"
                    f"  - üëÄ –ü–æ–∫–∞–∑—ã: **{impressions}**\n"
                    f"  - üë§ –û—Ö–≤–∞—Ç: **{reach}**\n"
                    f"  - ‚ú® –ö–æ–Ω–≤–µ—Ä—Å–∏–∏ (–æ–±—â–∏–µ): **{conversions}**\n"
                    f"  - üí¨ –ù–∞—á–∞—Ç–æ –ø–µ—Ä–µ–ø–∏—Å–æ–∫: **{messenger_sends}**\n" 
                    f"  - üí∞ –¶–µ–Ω–∞ –∑–∞ –ø–µ—Ä–µ–ø–∏—Å–∫—É: **${float(cost_per_messenger_send):.2f}**\n" 
                    f"  - üìù –õ–∏–¥—ã (—Å —Ñ–æ—Ä–º): **${float(cost_per_lead):.2f}**\n" 
                    f"  - üîÅ –ß–∞—Å—Ç–æ—Ç–∞: **${float(frequency):.2f}**\n\n"
                )
                all_adset_details.append(adset_detail_text)
    
    if not found_adsets_in_period:
        return [f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ '{period.replace('_', ' ').title()}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."]

    header = f"üìä **–û—Ç—á–µ—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –≥—Ä—É–ø–ø–∞–º –æ–±—ä—è–≤–ª–µ–Ω–∏–π ({period.replace('_', ' ').title()}):**\n\n"
    full_report_text = header + "".join(all_adset_details)
    return split_message(full_report_text)


async def get_brief_adset_report(account: AdAccount, period: str) -> list[str]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ –≥—Ä—É–ø–ø–∞–º –æ–±—ä—è–≤–ª–µ–Ω–∏–π (Adsets) —Å —Ñ–æ–∫—É—Å–æ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∞—Ö –∏ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ (—á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è).
    """
    active_campaigns = account.get_campaigns(
        fields=[Campaign.Field.name, Campaign.Field.id],
        params={'effective_status': ['ACTIVE']}
    )

    if not active_campaigns:
        return ["–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–¥–ª—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞)."]

    all_brief_adset_details = [] 
    
    found_adsets_with_messages = False 
    for campaign in active_campaigns:
        campaign_name = campaign['name']
        
        adsets = campaign.get_ad_sets( 
            fields=[AdSet.Field.name, AdSet.Field.id],
            params={'effective_status': ['ACTIVE']}
        )
        
        for adset in adsets:
            adset_name = adset['name']
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ actions –∏ cost_per_action_type –¥–ª—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            insights_params = {
                'date_preset': period,
                'fields': 'actions,cost_per_action_type' 
            }
            adset_insights = list(adset.get_insights(params=insights_params))
            insights = adset_insights[0] if adset_insights else {}

            messenger_sends = '0' 
            cost_per_messenger_send = '0'
            
            actions_list = insights.get('actions', []) 
            for action in actions_list:
                action_type = action.get('action_type')
                value = str(action.get('value', '0'))
                if action_type == 'onsite_conversion.total_messaging_connection':
                    messenger_sends = value
                # –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ action_type –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å–æ–∫, –¥–æ–±–∞–≤—å –∏—Ö —Å—é–¥–∞ –∏ —Å—É–º–º–∏—Ä—É–π

            cost_per_action_list = insights.get('cost_per_action_type', [])
            for cost_action in cost_per_action_list:
                action_type = cost_action.get('action_type')
                value = str(cost_action.get('value', '0'))
                if action_type == 'onsite_conversion.total_messaging_connection':
                    cost_per_messenger_send = value
                # –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ action_type –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å–æ–∫, –¥–æ–±–∞–≤—å –∏—Ö —Å—é–¥–∞ –∏ —É—Å—Ä–µ–¥–Ω—è–π –∏–ª–∏ –≤—ã–±–∏—Ä–∞–π –æ—Å–Ω–æ–≤–Ω—É—é

            # –î–æ–±–∞–≤–ª—è–µ–º adset –≤ –æ—Ç—á–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
            if float(messenger_sends) > 0: 
                found_adsets_with_messages = True
                
                brief_adset_detail_text = (
                    f"üí¨ –ì—Ä—É–ø–ø–∞ *{adset_name}* (–ö–∞–º–ø–∞–Ω–∏—è: {campaign_name}):\n"
                    f"  - –ù–∞—á–∞—Ç–æ –ø–µ—Ä–µ–ø–∏—Å–æ–∫: **{messenger_sends}**\n" 
                    f"  - –¶–µ–Ω–∞ –∑–∞ –ø–µ—Ä–µ–ø–∏—Å–∫—É: **${float(cost_per_messenger_send):.2f}**\n\n" 
                )
                all_brief_adset_details.append(brief_adset_detail_text)
    
    if not found_adsets_with_messages:
        return [f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –ø–µ—Ä–µ–ø–∏—Å–∫–∞–º–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ '{period.replace('_', ' ').title()}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."]

    header = f"üìä **–ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ –≥—Ä—É–ø–ø–∞–º –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–ü–µ—Ä–µ–ø–∏—Å–∫–∏, {period.replace('_', ' ').title()}):**\n\n"
    full_report_text = header + "".join(all_brief_adset_details)
    return split_message(full_report_text)


async def get_daily_comparison_report(account: AdAccount, chat_id: int, bot) -> list[str]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç-—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ "–í—á–µ—Ä–∞ vs –°–µ–≥–æ–¥–Ω—è" –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ (–ø–æ—Ç—Ä–∞—á–µ–Ω–æ, –ø–µ—Ä–µ–ø–∏—Å–∫–∏, —Ü–µ–Ω–∞).
    –¢–∞–∫–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∏–∞–≥—Ä–∞–º–º—É.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ (—á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è), –∏—Å–∫–ª—é—á–∞—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é.
    """
    report_lines = []
    
    # 1. –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –≤—á–µ—Ä–∞
    insights_today = {}
    insights_yesterday = {}

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è (—É—Ä–æ–≤–µ–Ω—å –∞–∫–∫–∞—É–Ω—Ç–∞, –Ω–µ –∫–∞–º–ø–∞–Ω–∏–π)
        today_insights_data = list(account.get_insights(
            params={'date_preset': 'today', 'fields': 'spend,actions,cost_per_action_type'}
        ))
        if today_insights_data:
            insights_today = today_insights_data[0]

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤—á–µ—Ä–∞ (—É—Ä–æ–≤–µ–Ω—å –∞–∫–∫–∞—É–Ω—Ç–∞)
        yesterday_insights_data = list(account.get_insights(
            params={'date_preset': 'yesterday', 'fields': 'spend,actions,cost_per_action_type'}
        ))
        if yesterday_insights_data:
            insights_yesterday = yesterday_insights_data[0]

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}", exc_info=True)
        return ["–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."]

    # 2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ (–¥–ª—è —Å–µ–≥–æ–¥–Ω—è –∏ –≤—á–µ—Ä–∞)
    # –°–µ–≥–æ–¥–Ω—è
    spend_today = float(insights_today.get('spend', '0'))
    messenger_sends_today = '0'
    cost_per_messenger_send_today = '0'

    for action in insights_today.get('actions', []):
        if action.get('action_type') == 'onsite_conversion.total_messaging_connection':
            messenger_sends_today = str(action.get('value', '0'))
            break 
    for cost_action in insights_today.get('cost_per_action_type', []):
        if cost_action.get('action_type') == 'onsite_conversion.total_messaging_connection':
            cost_per_messenger_send_today = str(cost_action.get('value', '0'))
            break
    
    # –í—á–µ—Ä–∞
    spend_yesterday = float(insights_yesterday.get('spend', '0'))
    messenger_sends_yesterday = '0'
    cost_per_messenger_send_yesterday = '0'

    for action in insights_yesterday.get('actions', []):
        if action.get('action_type') == 'onsite_conversion.total_messaging_connection':
            messenger_sends_yesterday = str(action.get('value', '0'))
            break
    for cost_action in insights_yesterday.get('cost_per_action_type', []):
        if cost_action.get('action_type') == 'onsite_conversion.total_messaging_connection':
            cost_per_messenger_send_yesterday = str(cost_action.get('value', '0'))
            break

    # 3. –†–∞—Å—á–µ—Ç —Ä–∞–∑–Ω–∏—Ü—ã –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç—á–µ—Ç–∞
    report_lines.append("üìä **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π: –°–µ–≥–æ–¥–Ω—è vs –í—á–µ—Ä–∞ (–ø–æ –∞–∫–∫–∞—É–Ω—Ç—É)**\n\n")

    # –ü–æ—Ç—Ä–∞—á–µ–Ω–æ
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º 1e-9 (–æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–æ–µ —á–∏—Å–ª–æ) –≤–º–µ—Å—Ç–æ 0 –¥–ª—è –¥–µ–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç
    spend_diff_percent = ((spend_today - spend_yesterday) / (spend_yesterday or 1e-9) * 100) if spend_today > 0 or spend_yesterday > 0 else 0
    report_lines.append(f"üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ:\n  - –°–µ–≥–æ–¥–Ω—è: **${spend_today:.2f}**\n  - –í—á–µ—Ä–∞: **${spend_yesterday:.2f}**\n  - –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {spend_diff_percent:.2f}% {'‚¨ÜÔ∏è' if spend_diff_percent > 0 else ('‚¨áÔ∏è' if spend_diff_percent < 0 else '‚ÜîÔ∏è')}\n\n")

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–ø–∏—Å–æ–∫
    sends_today_val = float(messenger_sends_today)
    sends_yesterday_val = float(messenger_sends_yesterday)
    sends_diff_percent = ((sends_today_val - sends_yesterday_val) / (sends_yesterday_val or 1e-9) * 100) if sends_today_val > 0 or sends_yesterday_val > 0 else 0
    report_lines.append(f"üí¨ –ù–∞—á–∞—Ç–æ –ø–µ—Ä–µ–ø–∏—Å–æ–∫:\n  - –°–µ–≥–æ–¥–Ω—è: **{int(sends_today_val)}**\n  - –í—á–µ—Ä–∞: **{int(sends_yesterday_val)}**\n  - –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {sends_diff_percent:.2f}% {'‚¨ÜÔ∏è' if sends_diff_percent > 0 else ('‚¨áÔ∏è' if sends_diff_percent < 0 else '‚ÜîÔ∏è')}\n\n")

    # –¶–µ–Ω–∞ –∑–∞ –ø–µ—Ä–µ–ø–∏—Å–∫—É (CPC –Ω–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∏)
    cpm_today_val = float(cost_per_messenger_send_today)
    cpm_yesterday_val = float(cost_per_messenger_send_yesterday)
    cpm_diff_percent = ((cpm_today_val - cpm_yesterday_val) / (cpm_yesterday_val or 1e-9) * 100) if cpm_today_val > 0 or cpm_yesterday_val > 0 else 0
    # –î–ª—è —Ü–µ–Ω—ã —Å—Ç—Ä–µ–ª–∫–∏ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã (–º–µ–Ω—å—à–∞—è —Ü–µ–Ω–∞ - –ª—É—á—à–µ)
    report_lines.append(f"üí∞ –¶–µ–Ω–∞ –∑–∞ –ø–µ—Ä–µ–ø–∏—Å–∫—É:\n  - –°–µ–≥–æ–¥–Ω—è: **${cpm_today_val:.2f}**\n  - –í—á–µ—Ä–∞: **${cpm_yesterday_val:.2f}**\n  - –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {cpm_diff_percent:.2f}% {'‚¨áÔ∏è' if cpm_diff_percent > 0 else ('‚¨ÜÔ∏è' if cpm_diff_percent < 0 else '‚ÜîÔ∏è')}\n\n") 

    # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã
    try:
        if spend_today + spend_yesterday > 0 or sends_today_val + sends_yesterday_val > 0:
            labels = ['–í—á–µ—Ä–∞', '–°–µ–≥–æ–¥–Ω—è']
            bar_width = 0.5 # –¢–æ–ª—â–∏–Ω–∞ –ø–æ–ª–æ—Å—ã

            # --- –ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–∞—Ç ---
            fig1, ax1 = plt.subplots(figsize=(6, 3)) # –£–º–µ–Ω—å—à–∏–ª –≤—ã—Å–æ—Ç—É –¥–ª—è —Ç–æ–Ω–∫–∏—Ö –ø–æ–ª–æ—Å
            spends = [spend_yesterday, spend_today]
            
            # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞
            y_pos_spends = range(len(labels))
            ax1.barh(y_pos_spends, spends, height=bar_width, color=['lightcoral', 'skyblue'])
            ax1.set_yticks(y_pos_spends)
            ax1.set_yticklabels(labels)
            ax1.set_title('–¢—Ä–∞—Ç—ã')
            ax1.set_xlabel('–°—É–º–º–∞ ($)')
            ax1.invert_yaxis() # –°–≤–µ—Ä—Ö—É "–í—á–µ—Ä–∞", —Å–Ω–∏–∑—É "–°–µ–≥–æ–¥–Ω—è"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –ø–æ–ª–æ—Å—ã
            for i, v in enumerate(spends):
                ax1.text(v + (max(spends)*0.05 if max(spends) > 0 else 1), i, f'${v:.2f}', va='center', ha='left', fontsize=9)
            
            plt.tight_layout()
            
            buf1 = io.BytesIO()
            plt.savefig(buf1, format='png', bbox_inches='tight')
            buf1.seek(0)
            plt.close(fig1) 

            await bot.send_photo(chat_id=chat_id, photo=buf1, caption="–î–∏–Ω–∞–º–∏–∫–∞ —Ç—Ä–∞—Ç –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É:")
            
            # --- –ì—Ä–∞—Ñ–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–ø–∏—Å–æ–∫ ---
            fig2, ax2 = plt.subplots(figsize=(6, 3)) # –£–º–µ–Ω—å—à–∏–ª –≤—ã—Å–æ—Ç—É
            sends_counts = [sends_yesterday_val, sends_today_val]
            
            # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞
            y_pos_sends = range(len(labels))
            ax2.barh(y_pos_sends, sends_counts, height=bar_width, color=['lightcoral', 'skyblue'])
            ax2.set_yticks(y_pos_sends)
            ax2.set_yticklabels(labels)
            ax2.set_title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–ø–∏—Å–æ–∫')
            ax2.set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
            ax2.invert_yaxis() # –°–≤–µ—Ä—Ö—É "–í—á–µ—Ä–∞", —Å–Ω–∏–∑—É "–°–µ–≥–æ–¥–Ω—è"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –ø–æ–ª–æ—Å—ã
            for i, v in enumerate(sends_counts):
                ax2.text(v + (max(sends_counts)*0.05 if max(sends_counts) > 0 else 1), i, f'{int(v)}', va='center', ha='left', fontsize=9)
            
            plt.tight_layout()

            buf2 = io.BytesIO()
            plt.savefig(buf2, format='png', bbox_inches='tight')
            buf2.seek(0)
            plt.close(fig2)

            await bot.send_photo(chat_id=chat_id, photo=buf2, caption="–î–∏–Ω–∞–º–∏–∫–∞ –ø–µ—Ä–µ–ø–∏—Å–æ–∫ –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É:")

        else:
            report_lines.append("–ù–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞ –¥–Ω—è.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã: {e}", exc_info=True)
        report_lines.append("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º.")

    return split_message("".join(report_lines))


# –ù–æ–≤–∞—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
async def start_scheduler_safely(context: ContextTypes.DEFAULT_TYPE):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç APScheduler –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á–∏, –µ—Å–ª–∏ –æ–Ω–∏ –≤–∫–ª—é—á–µ–Ω—ã,
    –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ Telegram-–±–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è.
    """
    logging.info("–§—É–Ω–∫—Ü–∏—è start_scheduler_safely –∑–∞–ø—É—â–µ–Ω–∞.")

    if not scheduler.running:
        scheduler.start()
        logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ APScheduler —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ job_queue.")

    # Re-add the daily report job if auto-reports are enabled in settings
    if bot_settings['auto_reports_enabled']:
        if 'daily_auto_report' not in [job.id for job in scheduler.get_jobs()]: 
            scheduler.add_job(
                send_daily_auto_report,
                CronTrigger(hour=bot_settings['report_time'].split(':')[0], minute=bot_settings['report_time'].split(':')[1]),
                args=[context.bot, ADMIN_TELEGRAM_ID, FB_ACCESS_TOKEN, FB_APP_ID, FB_APP_SECRET, AD_ACCOUNT_ID], 
                id='daily_auto_report',
                replace_existing=True 
            )
            logging.info(f"–ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ job_queue. –í—Ä–µ–º—è: {bot_settings['report_time']}")
    else:
        if scheduler.get_job('daily_auto_report'): 
            scheduler.remove_job('daily_auto_report')
            logging.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ.")


# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ---
async def auth_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /auth –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–¥—É.
    """
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    if user_id in bot_settings['authorized_users']:
        await context.bot.send_message(chat_id=chat_id, text="–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
        return

    if not context.args:
        await context.bot.send_message(chat_id=chat_id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–∏–º–µ—Ä: `/auth 0105`")
        return

    entered_code = context.args[0] 

    if entered_code == bot_settings['login_code']:
        bot_settings['authorized_users'].append(user_id)
        save_settings(bot_settings) 
        
        await context.bot.send_message(chat_id=chat_id, text="üéâ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É.")
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è.")
        await start(update, context) 
    else:
        await context.bot.send_message(chat_id=chat_id, text="–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: '{entered_code}'.")

# --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ---


# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø –ó–ê–ö–ê–ó–û–í ---
def save_orders_for_date(date_str: str, count: int):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –¥–∞—Ç—ã –≤ bot_settings.
    """
    bot_settings['daily_orders'][date_str] = count
    save_settings(bot_settings)
    logging.info(f"–ó–∞–∫–∞–∑—ã –∑–∞ {date_str} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {count}")
# --- –ö–û–ù–ï–¶ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ô –§–£–ù–ö–¶–ò–ò ---


# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–¢–ß–ï–¢–ê –ü–û –ü–†–û–î–ê–ñ–ê–ú ---
async def get_sales_report(period: str, ad_account_id: str, fb_access_token: str, fb_app_id: str, fb_app_secret: str) -> list[str]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º (–ü–æ—Ç—Ä–∞—á–µ–Ω–æ, –ö–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤, –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞) –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ 3 –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    report_parts = []
    
    # 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—É—é —Å—É–º–º—É –∏–∑ Facebook Ads API
    total_spend = 0.0
    try:
        FacebookAdsApi.init(app_id=fb_app_id, app_secret=fb_app_secret, access_token=fb_access_token)
        account = AdAccount(ad_account_id)
        
        insights_data = list(account.get_insights(
            params={'date_preset': period, 'fields': 'spend'}
        ))
        if insights_data and insights_data[0]:
            total_spend = float(insights_data[0].get('spend', '0'))
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞—Ç –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º: {e}", exc_info=True)
        report_parts.append(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ {period.replace('_', ' ').title()}.")
        total_spend = None 

    # 2. –°—É–º–º–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ bot_settings['daily_orders'] –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    total_orders = 0
    orders_data = bot_settings.get('daily_orders', {})

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
    start_date = None
    end_date = datetime.date.today()

    if period == 'today':
        start_date = datetime.date.today()
        end_date = datetime.date.today()
    elif period == 'yesterday':
        start_date = datetime.date.today() - datetime.timedelta(days=1)
        end_date = start_date
    elif period == 'last_7d':
        start_date = datetime.date.today() - datetime.timedelta(days=6)
    elif period == 'last_30d':
        start_date = datetime.date.today() - datetime.timedelta(days=29)
    elif period == 'this_month':
        start_date = datetime.date(end_date.year, end_date.month, 1)

    if start_date:
        current_date = start_date
        while current_date <= end_date:
            date_str = current_date.isoformat()
            total_orders += orders_data.get(date_str, 0)
            current_date += datetime.timedelta(days=1)
    
    # 3. –§–æ—Ä–º–∏—Ä—É–µ–º 3 –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è
    # –°–æ–æ–±—â–µ–Ω–∏–µ 1: –ü–æ—Ç—Ä–∞—á–µ–Ω–æ
    report_parts.append(
        f"üìä **–û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º ({period.replace('_', ' ').title()}):**\n\n"
        f"üí∏ **–°—É–º–º–∞ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤:**\n"
        f"  - **${total_spend:.2f}**" if total_spend is not None else "  - –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ."
    )

    # –°–æ–æ–±—â–µ–Ω–∏–µ 2: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
    report_parts.append(
        f"üì¶ **–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤:**\n"
        f"  - **{total_orders}**"
    )

    # –°–æ–æ–±—â–µ–Ω–∏–µ 3: –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞
    cost_per_order = 0.0
    if total_spend is not None and total_orders > 0:
        cost_per_order = total_spend / total_orders
        report_parts.append(
            f"üí∞ **–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞:**\n"
            f"  - **${cost_per_order:.2f}**"
        )
    else:
        report_parts.append(
            f"üí∞ **–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞:**\n"
            f"  - –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å (–Ω–µ—Ç —Ç—Ä–∞—Ç –∏–ª–∏ –∑–∞–∫–∞–∑–æ–≤)."
        )
    
    return report_parts

# --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –§–£–ù–ö–¶–ò–ò ---


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == '__main__':
    print("–ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞...")
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    
    application.bot_data['admin_chat_id'] = ADMIN_TELEGRAM_ID
    application.bot_data['fb_access_token'] = FB_ACCESS_TOKEN
    application.bot_data['fb_app_id'] = FB_APP_ID
    application.bot_data['fb_app_secret'] = FB_APP_SECRET
    application.bot_data['ad_account_id'] = AD_ACCOUNT_ID

    application.job_queue.run_once(start_scheduler_safely, 0) 

    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('auth', auth_command)) 
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    application.add_handler(CallbackQueryHandler(button_callback))
    
    print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–±—ã—Ç–∏–π...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)